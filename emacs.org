* Requires
#+begin_src emacs-lisp
(require 'cl)
#+end_src

* Operating system
#+begin_src emacs-lisp
(defvar dan/operating-system
  (intern (downcase
           (replace-regexp-in-string
            "\n" ""
            (shell-command-to-string "uname"))))
  "The current OS")
#+end_src

* Starter kit
#+begin_src emacs-lisp
(setq dan/starter-kit-components-all '(bindings defuns eshell lisp misc org perl registers ruby yasnippet))
(setq dan/starter-kit-components '(defuns))

(let ((dotfiles-dir "~/lib/emacs/emacs-starter-kit"))
  (mapcar
   'org-babel-load-file
   (mapcar
    (lambda (x) (format "%s/starter-kit-%s.org" dotfiles-dir (symbol-name x)))
    dan/starter-kit-components)))
#+end_src

* My functions
** indent or complete
#+begin_src emacs-lisp
(defun dan/indent-or-complete ()
  (interactive)
  (if (and (looking-at "[ \n)]")
           (looking-back "[^ \n]"))
      (complete-symbol nil)
    (indent-for-tab-command)))
#+end_src

** codequality
#+begin_src emacs-lisp
(defun dan/codequality (&optional dir)
  (interactive "DBase Directory: ")
  (compile
   (format
    "find %s -type f -name '*.py' | grep -Fv '/migrations/'  | xargs codequality '{}' \;" dir dir)))
#+end_src

** screenshot
http://thread.gmane.org/gmane.emacs.orgmode/33770
#+begin_src emacs-lisp
(defun dan/org-screenshot ()
"Store a screenshot in a subdirectory named screenshots and
insert a link in the current file."
  (interactive)
  ((lambda (file)
     (make-directory (file-name-directory file) t)
     (shell-command (format "screencapture -s %s" file))
     (insert (concat "[[file:" file "]]")))
  (format "screenshots/%s.png"
          (make-temp-name
           (file-name-nondirectory (buffer-file-name))))))
#+end_src

** dan/set-key-bindings
#+begin_src emacs-lisp
(defvar dan/key-bindings nil
  "List of all key bindings.
This is an alist of alists. The key of the top level alist
references a key map. If the key is a string, the string
\"-mode-map\" is appended to it when finding the mode-map. If it
is a symbol, it is used as is.")

(defun dan/set-key-bindings (&optional mode-map)
  (interactive)
  (mapc (lambda (pair)
          (let* ((map (car pair))
                 (bindings (cdr pair)))
            (if (stringp map) (setq map (intern (concat map "-mode-map"))))
            (mapc (lambda (binding)
                    (define-key (eval map) (car binding) (cdr binding)))
                  bindings)))
        (or (and mode-map `(,(assoc mode-map dan/key-bindings)))
            dan/key-bindings)))

(defun dan/assoc-delete-all (key alist)
  "Like `assq-delete-all' but using `equal' for comparison"
  (delq nil
        (mapcar (lambda (el) (unless (equal (car el) key) el))
                alist)))

(defun dan/register-key-bindings (bindings-alist)
  "Add bindings in dan/key-bindings"
  (setq
   dan/key-bindings
   (cons
    bindings-alist
    (dan/assoc-delete-all (car bindings-alist) dan/key-bindings)))
  (dan/set-key-bindings))
#+end_src

** Do until no error
#+begin_src emacs-lisp
(defmacro dan/do-until-no-error (rest &rest body)
  "Repeat evaluation of BODY until no error.
Wait for REST between each attempt."
  `(while (null (ignore-errors (progn ,@body t))) (sit-for rest)))
#+end_src

** Occur
#+begin_src emacs-lisp
(defun dan/occur-mode-goto-occurrence ()
  (interactive)
  (call-interactively 'occur-mode-goto-occurrence)
  (other-window 1))

(defun dan/occur ()
  (interactive)
  (let ((tap (thing-at-point 'symbol)))
    (and tap (push tap regexp-history)))
  (call-interactively 'occur)
  (let ((results-buffer (get-buffer "*Occur*")))
    (if results-buffer
        (progn
          (other-window 1)
          (let ((buffer-read-only)) (kill-line 1)))
      (message "No matches"))))

(defun dan/occur-def-class ()
  (interactive)
  (push "^\\(class\\|def\\) " regexp-history)
  (call-interactively 'occur)
  (let ((results-buffer (get-buffer "*Occur*")))
    (if results-buffer
        (progn
          (other-window 1)
          (let ((buffer-read-only)) (kill-line 1)))
      (message "No matches"))))

;; (local-set-key [(return)] 'dan/occur-mode-goto-occurrence)

#+end_src

** Set local variables
#+begin_src emacs-lisp
(defun dan/set-local-variables (alist)
  (dolist (pair alist)
    (set (make-local-variable (car (pair))) (cadr pair))))
#+end_src

** Evaluate expression and save string to kill ring
#+begin_src emacs-lisp
(defun dan/save-value-to-kill-ring (&optional sexp)
  (interactive "XExpression to evaluate and save to kill-ring: ")
  (with-temp-buffer
    (let ((string (format "%s" sexp)))
      (insert string)
      (kill-ring-save (point-min) (point-max)))))

(defun dan/save-buffer-file-name-to-kill-ring ()
  (interactive)
  (dan/save-value-to-kill-ring buffer-file-name))
#+end_src

** Appearance
#+begin_src emacs-lisp
(defun dan/sanitise-faces ()
  (interactive)
  ;; (set-face-background 'region (face-background 'default)) ;; don't highlight region
  (set-face-background 'fringe (face-background 'default)) ;; don't have different color fringe
  ;; (set-face-background 'highlight (face-background 'default))
  ;; (set-face-foreground 'highlight (face-foreground 'font-lock-comment-face))
  ;; (set-face-foreground 'cursor (face-foreground 'font-lock-comment-face))
  (set-cursor-color "red")
  (set-face-attribute 'org-hide nil
                      :foreground
                      (face-attribute 'default :background))
  (dan/set-show-paren-style)
  (font-lock-fontify-buffer))

(defun dan/set-show-paren-style ()
  (interactive)
  (setq show-paren-delay .125)
  (setq show-paren-style 'parenthesis)
  ;; use these in a mode hook function
  ;; (make-variable-buffer-local 'show-paren-mode)
  ;; (show-paren-mode t)
  (set-face-attribute 'show-paren-match-face nil :weight 'extra-bold)
  (set-face-background 'show-paren-match-face (face-background 'default))
  (set-face-attribute 'show-paren-match-face nil :foreground "red"))
#+end_src
** Set executable paths
#+begin_src emacs-lisp
(require 'cl)
(defun dan/set-executable-paths ()
  "Set $PATH and `exec-path'."
  (interactive)
  (let* (($HOME (getenv "HOME"))
         ($HOME/bin (concat $HOME "/" "bin"))
         ($PATH
          (delete-dups
           (split-string (getenv "PATH") path-separator)))
         (paths
          (case dan/operating-system
            ('darwin
            (list $HOME/bin
                  "/usr/local/Cellar/python/2.7.2/bin/"
                  "/usr/local/share/python"
                  "/usr/local/bin"
                  "/usr/local/share/npm/bin"
                  "/usr/texbin"))
            (t (list $HOME/bin)))))
    (setenv
     "PATH"
     (mapconcat 'identity
                (append
                 (remove-if (lambda (p) (member p $PATH)) paths)
                 $PATH)
                path-separator))
    (setq exec-path
          (append
           (remove-if (lambda (p) (member p exec-path)) paths)
           (delete-dups exec-path)))))
(dan/set-executable-paths)
#+end_src

** Sudo read file
#+begin_src emacs-lisp
(defun dan/sudo-read-from-file (file)
  (interactive "FFile: ")
  (with-temp-buffer
    (insert-file-contents
     (concat "/sudo::" (expand-file-name file)))
    (buffer-string)))
#+end_src

** Trace functions
#+begin_src emacs-lisp
(defun dan/trace-functions (&optional regexp)
  "Trace functions with names matching regexp"
  ;; TODO: read regexp from minibuffer
  (interactive "sTrace functions matching: ")
  (mapc 'trace-function
        (loop for x being the symbols
              if (and (fboundp x) (string-match regexp (symbol-name x)))
              collect x)))
#+end_src

** Debug on error
#+begin_src emacs-lisp
(defun dan/toggle-debug-on-error ()
  (interactive)
  (message
   "debug-on-error %s"
   (if (setq debug-on-error (not debug-on-error))
       "on" "off")))
#+end_src

** Revert all elisp buffers
#+begin_src emacs-lisp
(defun dan/revert-elisp-buffers ()
  "Revert all elisp buffers"
  (interactive)
  (save-excursion
    (dolist (buf (buffer-list))
      (set-buffer buf)
      (if (eq major-mode 'emacs-lisp-mode)
          (revert-buffer)))))
#+end_src


#+begin_src emacs-lisp
(defun dan/looking-at-string (string)
  (interactive)
  (string-equal
   string
   (buffer-substring-no-properties (point) (+ (point) (length string)))))

;; this doesn't write anything in minibuffer...
(defun dan/show-current-font()
  (interactive)
  (frame-parameter nil 'font))

;; Why doesn't this work? (Says something about wrong number of arguments)
(defun dan/indent-buffer ()
  "Indent whole buffer"
  (interactive)
  (mark-whole-buffer)
  (indent-region))

(defun dan/eval-buffer-confirm ()
  (interactive)
  (save-buffer)
  (eval-buffer)
  (message "loaded buffer %s" (buffer-name)))

;; http://blog.printf.net/ find-tag-at-point I often work on the
;; kernel or Xorg, and I would be totally ridiculously lost with both
;; if I wasn't using "tags" support in my editor. Here's how it works:
;; you run etags over your .[ch] files (or make tags in a kernel
;; source dir), and it generates a TAGS index. You load that in emacs
;; with M-x visit-tags-table, and with the below keybinding, pressing
;; F10 will take you to the original definition of whichever symbol
;; the cursor is on, no matter where it appears in the source
;; tree. Within a few presses of F10, you've escaped macro hell and
;; found where the code that actually defines the function you're
;; interested in is.


(defun find-tag-at-point ()
  "*Find tag whose name contains TAGNAME.
  Identical to `find-tag' but does not prompt for
  tag when called interactively;  instead, uses
  tag around or before point."
  (interactive)
  (find-tag (if current-prefix-arg
                (find-tag-tag "Find tag: "))
            (find-tag (find-tag-default))))

(defun search-forward-symbol-at-point ()
  "Search forward to next occurrence of thing at point"
  (interactive)
  (search-forward (symbol-name (symbol-at-point)) nil t)
  (backward-sexp)) ;; should be backward-symbol

(defun dan/insert-double-quotes ()
  (interactive)
  (insert "\"\"")
  (backward-char))

(defun quote-list-of-symbols ()
  "Place double quotes around the comma-separated,
parenthesis-delimited list of symbols at point"
  (interactive)
  (save-excursion
    (let ((beg (search-forward "("))
          (end (save-excursion (search-forward ")"))))
      (insert "\"")
      (while (replace-regexp " *, *" "\", \"" t beg end))
      (replace-regexp " *)" "\")" t (point) (1+ end)))))

(defun dan/find-defun (fun)
  (interactive "a")
  (describe-function fun)
  (other-window 1)
  (when (re-search-forward "`[^']+\.e")
    (push-button)))

(defun dan/wc-region ()
  (interactive)
  (shell-command-on-region (mark) (point) "wc"))

;; http://www.emacswiki.org/cgi-bin/wiki/ToggleWindowSplit
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))


(defun byte-compile-dir (dir)
  (interactive)
  (let ((files (directory-files dir t ".*\.el" t)) file)
    (while (setq file (pop files))
      (byte-compile-file file))))


(defun budget-eval ()
  ;; to eval yanked text in python-shell -- doesn't work
  (interactive)
  (other-buffer)
  (yank)
  (newline))

;; (defun dan/xclip-kill ()
;;   "kill region and place on X clipboard"
;;   (interactive)
;;   (shell-command-on-region (mark) (point) "xclip")
;;   (delete-region (mark) (point))) ;; don't add to kill ring

;; (defun dan/xclip-yank ()
;;   "yank from X clipboard and insert at point"
;;   (interactive)
;;   (shell-command "xclip -o" t))

(defun dan/next-line-and-indent ()
  (interactive)
  (next-line)
  (indent-according-to-mode))

(defun dan/previous-line-and-indent ()
  (interactive)
  (previous-line)
  (indent-according-to-mode))

(defun dan/insert-square-brackets ()
  (interactive)
  (insert "[]")
  (backward-char))

(defun dan/insert-curly-brackets ()
  (interactive)
  (insert "{}")
  (backward-char))

(defun dan/enclose-sexp-in-parentheses ()
  (interactive)
  (insert "(")
  (forward-sexp)
  (insert ")"))

(defun dan/enclose-rest-of-line-in-parentheses ()
  (interactive)
  (insert "(")
  (end-of-line) ;; need to account for comment on same line
  (insert ")"))

(defun dan/insert-- ()
  (interactive)
  (insert "-"))

(defun dan/quote-word ()
  "Surround word at point with double quotes"
  (interactive)
  (re-search-backward "[ ,(\t]" nil t)
  (forward-char) (insert "\"")
  (re-search-forward "[ ,)\t]" nil t)
  (backward-char) (insert "\""))

(defun dan/compile-and-switch-to-iESS ()
  (interactive)
  (when (compile "make -k")
    (ess-switch-to-end-of-ESS)))

;;  (when (shell-command "make -k")

;; From Sacha Chua website
(defun byte-compile-if-newer-and-load (file)
  "Byte compile file.el if newer than file.elc"
  (if (file-newer-than-file-p (concat file ".el")
                              (concat file ".elc"))
      (byte-compile-file (concat file ".el")))
  (load file))
#+end_src
** Show buffer-file-name
#+begin_src emacs-lisp
(defun dan/show-buffer-file-name ()
  (interactive)
  (let ((bn (buffer-name (current-buffer)))
        (bfn (buffer-file-name))
        (dd default-directory))
    (if bfn
        ;; file buffer
        (if (string= (file-name-nondirectory bfn) bn)
            ;; expected buffer name
            (if (string= (file-name-directory bfn) dd)
                ;; expected default-directory
                (message bfn)
              ;; unexpected default-directory
              (message "buffer-file-name: %s\tdefault-directory: %s" bn dd))
          ;; unexpected buffer name
          (if (string= (file-name-directory bfn) dd)
              ;; expected default-directory
              (message "buffer-file-name: %s\tbuffer-name: %s" bfn bn)
            ;; unexpected default-directory
            (message "buffer-file-name: %s\tbuffer-name: %s\tdefault-directory: %s" bfn bn dd)))
      ;; non-file buffer
      (message "buffer-file-name: %S\tbuffer-name: %s\tdefault-directory: %s" bfn bn dd))
    (dan/save-value-to-kill-ring (file-name-nondirectory bfn))))
#+end_src
** Show variable
#+begin_src emacs-lisp
(defun dan/show-variable (&optional sym)
  (interactive "vVariable name: ")
  (message "%S" (eval sym)))
#+end_src

** Format post
#+begin_src emacs-lisp
(defun dan/format-region-for-post (start end)
  (interactive "r")
  (narrow-to-region start end)
  (goto-char (point-min))
  (while (re-search-forward "^[ \t]+" nil t)
    (replace-match ""))
  (goto-char (point-min))
  (while (re-search-forward "\\([a-zA-Z]\\)\n\\([a-zA-Z]\\)" nil t)
    (replace-match "\1 \2" t t))
  (widen))
#+end_src

** Switch windows
#+begin_src emacs-lisp
(defun dan/switch-windows ()
  "Switch the buffers between windows"
  (interactive)
  (let ((other-window-buffer (window-buffer (next-window))))
    (set-window-buffer (next-window) (current-buffer))
    (set-window-buffer (selected-window) other-window-buffer)))
#+end_src

** Find-file emacs.org
#+begin_src emacs-lisp
(defun dan/find-file-emacs-config ()
  (interactive)
  (find-file
   (expand-file-name "~/config/emacs/emacs.org")))
#+end_src

** Etc
#+begin_src emacs-lisp
;; (setq custom-file "~/src/config/emacs/emacs.el") ;; now code
;; generated by emacs' customisation buffers will go in this file rather
;; than ~/.emacs

;; Kevin Rodgers help-gnu-emacs
;; eldoc/timer can be used somehow to control how long messages appear for
;; (add-hook 'post-command-hook 'eldoc-schedule-timer nil t)
;; (add-hook 'pre-command-hook 'eldoc-pre-command-refresh-echo-area t)
;; (setq eldoc-timer [nil 1000000 0 500000 t eldoc-print-current-symbol-info nil t]) ;;
#+end_src
** Current line and column
#+begin_src emacs-lisp
(defun dan/current-column-line ()
  (let ((line (line-number-at-pos (point)))
        (col (current-column)))
    (message "line: %d\tcolumn: %d" line col)
    (list line col)))

(defun dan/eol-column-line (&optional arg)
  (interactive "P")
  (if arg (dan/current-column-line)
    (save-excursion
      (end-of-line)
      (dan/current-column-line))))
#+end_src

** Find function or library
#+begin_src emacs-lisp
(defun dan/find-function-or-library (&optional arg)
  (interactive "P")
  (call-interactively
   (if arg 'find-library 'find-function)))
#+end_src

** Require
#+begin_src emacs-lisp
(defun dan/require (feature)
  (unless (featurep feature)
    (if (locate-library (symbol-name feature))
        (require feature)
      (progn
        (message "Could not locate library: %s" (symbol-name feature))
        nil))))
#+end_src

** Find file
#+begin_src emacs-lisp
;; based on starter-kit-defuns
(defun dan/recentf-ido-find-file ()
  "Find a recent file using ido."
  (interactive)
  (let* ((alist
          (mapcar
           (lambda (f)
             (cons (format "%s/%s"
                           (file-name-nondirectory
                            (substring (file-name-directory f) 0 -1))
                           (file-name-nondirectory f))
                   f))
                  recentf-list))
         (file (ido-completing-read "Find file: " (mapcar 'car alist) nil t)))
    (when file
      (find-file (cdr (assoc file alist))))))

(defun dan/find-file (&optional arg)
  (interactive "P")
  (call-interactively
   (if arg 'ido-find-file 'dan/recentf-ido-find-file)))
#+end_src

** Show all in all buffers
#+begin_src emacs-lisp
(defun dan/show-all-all-buffers ()
  (interactive)
  (save-window-excursion
    (mapc (lambda (b) (set-buffer b) (show-all))
          (buffer-list))))
#+end_src

** dan/keyboard-quit
#+begin_src emacs-lisp
(defun dan/switch-to-minibuffer ()
  (interactive)
  (switch-to-buffer (window-buffer (minibuffer-window))))

(defun dan/other-non-minibuffer-window ()
  (interactive)
  (while (progn (other-window 1)
                (window-minibuffer-p))))
#+end_src
** Scratch buffers
#+begin_src emacs-lisp
(defun dan/scratch-buffer (&optional arg)
  "Scratch buffers for various major modes"
  (interactive "P")
  (let* ((modes
          `(("org-mode" . "org")
            ("python-mode" . "py")
            ("emacs-lisp-mode" . "el")
            ("js-mode" . "js")))
         (buf-file-name (buffer-file-name (current-buffer)))
         (buf-mode
          (or (assoc (symbol-name major-mode) modes)
              (and buf-file-name
                   (cons (symbol-name major-mode)
                         (file-name-extension buf-file-name)))))
         (modes
          (if buf-mode
              (delete-dups (append (list buf-mode) modes))
            modes))
         (mode
          (ido-completing-read "Mode: " (mapcar #'car modes)))
         (mode-fun (intern mode))
         (contents
          (and (region-active-p)
               (prog1 (buffer-substring (region-beginning)
                                        (region-end))
                 (if arg (kill-region (region-beginning) (region-end)))))))
    (find-file (concat "/tmp/scratch." (cdr (assoc mode modes))))
    (unless (eq major-mode mode-fun) (funcall mode-fun))
    (when contents
      (delete-region (point-min) (point-max))
      (insert (org-remove-indentation contents)))))
#+end_src
* Core
** Windows and Frames
#+begin_src emacs-lisp
(setq pop-up-windows t
      split-window-preferred-function 'split-window-sensibly
      split-width-threshold nil
      split-height-threshold nil)

(if nil
    (defun dan/display-buffer-whole-frame (buffer &rest ignored)
      ;; (switch-to-buffer buffer)
      (delete-other-windows))

  (setq special-display-function 'dan/display-buffer-whole-frame)

  ;; (setq special-display-function (lambda (buffer &rest ignored) (switch-to-buffer buffer) (delete-other-windows))))
  (setq special-display-function (lambda (buffer &rest ignored) (delete-other-windows)))
  )

(defun dan/toggle-fullscreen (&optional arg)
  (interactive "P")
  (if arg (ns-toggle-fullscreen)
    (message "ns-toggle-fullscreen binding is disabled")))

;; http://www.emacswiki.org/emacs/FullScreen
;; not working on OSX yet
(defun dan/toggle-fullscreen-old (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
    (set-frame-parameter nil 'fullscreen
                         (if (equal 'fullboth current-value)
                             (if (boundp 'old-fullscreen) old-fullscreen nil)
                           (progn (setq old-fullscreen current-value)
                                  'fullboth)))))


#+end_src

*** Faces
#+begin_src emacs-lisp :tangle no
;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(default ((t
;;              (:inherit nil :stipple nil :background "Grey15" :foreground "Grey"
;;                        :inverse-video nil :box nil :strike-through nil :overline nil
;;                        :underline nil :slant normal :weight normal :height 100
;;                        :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
;;              '(gnus-cite-1 ((((class color) (background light)) (:foreground "deep sky blue")))))
;; '(cursor ((t (:background "red"))))) ;; "orchid" "goldenrod"
#+end_src
** Cursor
#+begin_src emacs-lisp
(set-cursor-color "red")
(setq-default cursor-in-non-selected-windows nil)
(nconc default-frame-alist '((cursor-type . bar)))
(blink-cursor-mode -1)
#+end_src

** Outline
   :PROPERTIES:
   :tangle: yes
   :END:

  [[gnus:org#87zlb6vt8m.fsf@mundaneum.com][Email from Sébastien Vauban: {Orgmode} Re: org-style foldin]]
#+begin_src emacs-lisp
(defun dan/prompt-for-outline-regexp (new-regexp)
  "ask the user for a local value of outline-regexp in this buffer"
  (interactive "Outline regexp: ")
  (set (make-local-variable 'outline-regexp) new-regexp))

;; (global-set-key (kbd "<f9>") 'prompt-for-outline-regexp)

(defun dan/th-outline-regexp ()
  "Calculate the outline regexp for the current mode."
  (let ((comment-starter (replace-regexp-in-string
                          "[[:space:]]+" "" comment-start)))
    (when (string= comment-start ";")
      (setq comment-starter ";;"))
    (concat "^" comment-starter "\\*+")))

(defun dan/th-outline-minor-mode-init ()
  (interactive)
  (setq outline-regexp (dan/th-outline-regexp))

  ;; highlight the headings
  ;; see http://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html
  ;; use M-x customize-apropos face to customize faces
  ;; to find the corresponding face for each outline level see org-faces.el
  (let ((heading-1-regexp (concat (substring outline-regexp 0 -1) "\\{1\\} \\(.*\\)"))
        (heading-2-regexp (concat (substring outline-regexp 0 -1) "\\{2\\} \\(.*\\)"))
        (heading-3-regexp (concat (substring outline-regexp 0 -1) "\\{3\\} \\(.*\\)"))
        (heading-4-regexp (concat (substring outline-regexp 0 -1) "\\{4,\\} \\(.*\\)"))
        )
    (font-lock-add-keywords
     nil
     `((,heading-1-regexp 1 'org-level-1 t)
       (,heading-2-regexp 1 'org-level-2 t)
       (,heading-3-regexp 1 'org-level-3 t)
       (,heading-4-regexp 1 'org-level-4 t)))))

;; (add-hook 'outline-minor-mode-hook
;;           'th-outline-minor-mode-init)


;; (org-level-1 ((t (:foreground "cornflower blue" :weight bold :height 1.8 :family "Arial"))))
;; (org-level-2 ((t (:foreground "LimeGreen" :weight bold :height 1.6 :family "Arial"))))
;; (org-level-3 ((t (:foreground "orange" :weight bold :height 1.3 :family "Arial"))))

;;* non-elisp modes
(add-hook 'outline-minor-mode-hook
          (lambda ()
            (define-key outline-minor-mode-map [(control tab)] 'org-cycle)
            (define-key outline-minor-mode-map [(backtab)] 'org-global-cycle))) ;; (shift tab) doesn't work

(add-hook 'outline-mode-hook
          (lambda ()
            (define-key outline-mode-map [(tab)] 'org-cycle)
            (define-key outline-mode-map [(backtab)] 'org-global-cycle))) ;; (shift tab) doesn't work

(defun dan/set-up-outline-minor-mode (outline-regexp)
  (set (make-local-variable 'outline-regexp) outline-regexp)
  (outline-minor-mode t)
  (org-overview)
  (org-content))

(add-hook 'ess-mode-hook
          (lambda ()
            (unless (eq noweb-code-mode 'R-mode)
              ;; (dan/set-up-outline-minor-mode "^\\(###\\|[a-zA-Z._[\"][a-zA-Z._0-9[\"]* *<- *function\\)")
              ;; (dan/set-up-outline-minor-mode "^[a-zA-Z._[\"][a-zA-Z._0-9[\"]* *<- *function")
              (dan/set-up-outline-minor-mode "[a-zA-Z._][a-zA-Z._0-9]* *<- *function"))))
;; (add-hook 'c-mode-hook
;;        (lambda () (dan/set-up-outline-minor-mode nil)))
;;                    "\\(void\\|int\\|double\\|char\\|struct\\|static\\|const\\)")))

(add-hook 'emacs-lisp-mode-hook
          (lambda () (dan/set-up-outline-minor-mode "\\((\\|;;;\\)")))
;; (add-hook 'python-mode-hook
;;            (lambda () (dan/set-up-outline-minor-mode "\\(def .+\\|class .+\\|##\\)")))
(add-hook 'bibtex-mode-hook
          (lambda () (dan/set-up-outline-minor-mode "@")))
#+end_src
*** stackoverflow python folding


*** hideshow
#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path "~/lib/emacs/hideshow-org")
(require 'hideshow-org)

(defun dan/hideshow-hook ()
  "thisandthat."
  (interactive)
  (progn (require 'hideshow-org)
     (global-set-key (kbd "C-c h") 'hs-org/minor-mode)
     (hs-org/minor-mode)))

(add-hook 'python-mode-hook 'dan/hideshow-hook)
#+end_src

** Completion
#+begin_src emacs-lisp :tangle yes
(setq dan/ignored-extensions
      '(".html" ".ps" ".bst" ".cls" ".pyc"
        ".fdf" ".spl" ".aux" ".ppt" ".doc" ".xls" ".mp3"))

(setq completion-ignored-extensions
      (union completion-ignored-extensions
             dan/ignored-extensions :test 'equal))

(require 'ido)
(setq ido-ignore-files '("\\`#")
      ido-ignore-buffers '())

;; As regexps, these should really have terminal $
(mapc (lambda (extension)
        (add-to-list 'ido-ignore-buffers (regexp-quote extension))
        (add-to-list 'ido-ignore-files (regexp-quote extension)))
      dan/ignored-extensions)

(add-to-list 'ido-ignore-buffers "\\*") ;; if you want *scratch* or *R* just type it

(add-to-list 'load-path "~/lib/emacs/winner-mode")
(require 'winner)
(let ((is-dired-buffer? (lambda (buff) (eq (with-current-buffer buff major-mode) 'dired-mode))))
  (add-to-list 'ido-ignore-buffers is-dired-buffer?)
  (add-to-list 'winner-boring-buffers is-dired-buffer?))

(setq completion-show-help nil)

;; (add-hook 'completion-list-mode-hook
;;           (lambda () 
;;             (unless (minibufferp (current-buffer)) (progn (goto-char (point-min))
;;                     (and (looking-at "Possible completions are:")
;;                          (kill-line 1))))))
#+end_src
** Search
#+begin_src emacs-lisp

#+end_src

** Compile
#+begin_src emacs-lisp
;; Don't offer to save directories!
(setq compilation-save-buffers-predicate (lambda () nil))
#+end_src

** Comint
#+begin_src emacs-lisp
(setq comint-input-ring-size 1024)

;; See ess-help post by M. Maechler on 23 Mar 2006
(eval-after-load
    "comint"
  '(progn
     (setq comint-scroll-to-bottom-on-output 'others) ; not current
     ;;=default: (setq comint-scroll-to-bottom-on-input nil)
     (setq comint-scroll-show-maximum-output t) ;;; this is the key
     (define-key comint-mode-map [C-up]
       'comint-previous-matching-input-from-input)
     (define-key comint-mode-map [C-down]
       'comint-next-matching-input-from-input)
     (define-key comint-mode-map "\C-a" 'comint-bol)))
#+end_src
** Config
*** Minor modes
#+begin_src emacs-lisp
(show-paren-mode t)
(winner-mode t)
(global-font-lock-mode t)

;; (desktop-save-mode t)
;; (display-battery-mode t)
(global-auto-revert-mode t)
(setq auto-revert-interval 1)
#+end_src
*** Elisp programming
#+begin_src emacs-lisp
(setq eval-expression-debug-on-error nil)
(setq find-function-C-source-directory "~/lib/emacs/emacs-23.1/src")
#+end_src
*** Etc
#+begin_src emacs-lisp
(setq ring-bell-function (lambda nil nil))
(setq case-fold-search nil)
(setq default-major-mode 'org-mode)
(setq diff-switches "-u")
(setq frame-title-format "emacs:%b") ;;      (concat  "%b - emacs@" (system-name)))
(setq kill-read-only-ok t)
(setq initial-scratch-message nil)
(setq minibuffer-message-timeout 0.5)
(setq parens-require-spaces nil)
(setq require-final-newline 'visit-save)
(setq vc-follow-symlinks t)
(setq x-alt-keysym 'meta)
(setq backup-inhibited t)
(setq font-lock-verbose nil)

;; (visit-tags-table tags-file-name)
;; (setq font-lock-always-fontify-immediately t) where did I get that from?

(fset 'yes-or-no-p 'y-or-n-p) ;; http://www.xsteve.at/prg/emacs/.emacs.txt -- replace y-e-s by y
(put 'narrow-to-region 'disabled nil)

;; put back-up files in a single (invisible) directory in the original file's directory
;; (setq backup-directory-alist '(("." . ".emacs-backups")))
;; put back-up files in a single (invisible) directory in home directory -- doesn't work
;; (setq backup-directory-alist '(("~/.emacs-backups")))
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; (setq kill-buffer-query-functions '(lambda() t))

;; (transient-mark-mode t) ;; something turns it off

(setq source-directory (expand-file-name "~/lib/emacs/emacs/src"))
#+end_src
*** Safe local variables
#+begin_src emacs-lisp :results pp
(setq safe-local-variable-values
      '(
        (org-babel-default-header-args
         (:tangle . "wtccc2-pca.py")
         (:exports . "code"))
        (org-babel-default-header-args
         (:tangle . "yes"))
        (org-babel-default-header-args
         (:results . "replace output")
         (:session . "*R - jsmr*")
         (:exports . "none"))
        (org-babel-default-header-args
         (:results . "replace output")
         (:session . "*R: wtccc2*")
         (:exports . "none"))
        (noweb-default-code-mode . R-mode)
        (org-src-preserve-indentation . t)
        (org-edit-src-content-indentation . 0)
        (outline-minor-mode)))
#+end_src
*** Hooks
:PROPERTIES:
:ID: 20eb729f-8509-4e78-bf5a-9b250b189b9b
:END:
#+begin_src emacs-lisp
;; This doesn't work with org-src-mode code buffers as their
;; buffer-file-name doesn't correspond to a file
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

(defvar dan/delete-trailing-whitespace-major-modes
  '(python-mode))

(defun dan/query-delete-trailing-whitespace ()
  "If there's trailing whitespace ask to delete it"
  (when (memq major-mode dan/delete-trailing-whitespace-major-modes)
    (unless buffer-read-only
      (save-excursion
        (save-window-excursion
          (save-restriction
            (goto-char (point-min))
            (and (re-search-forward "[ \t]$" nil t)
                 ;; (yes-or-no-p "Delete trailing whitespace?")
                 (delete-trailing-whitespace))))))))

(add-hook 'before-save-hook 'dan/query-delete-trailing-whitespace)
#+end_src
** Info
#+begin_src emacs-lisp :tangle no
(require 'info)
(add-to-list 'Info-directory-list "/usr/share/info/emacs-snapshot")
#+end_src
** Message Mode
#+begin_src emacs-lisp
(setq message-send-mail-partially nil)
#+end_src

** Browser
#+begin_src emacs-lisp
;; http://flash.metawaredesign.co.uk/2/.emacs
(let ((browser (if (eq dan/operating-system 'darwin)
                   "open"
                 (or (getenv "BROWSER") "google-chrome"))))
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program browser)
  (when (and browser (string-match browser "firefox"))
    (setq browse-url-firefox-new-window-is-tab t)))
#+end_src
** Non-default
*** Saveplace
#+begin_src emacs-lisp :tangle no
(require 'saveplace)
(setq-default save-place t)
#+end_src
** VC
#+begin_src emacs-lisp
(setq vc-handled-backends nil)
(setq vc-follow-symlinks t)
#+end_src
** Winner mode
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/winner-mode")
(require 'winner)
#+end_src

#+begin_src diff
diff --git a/lisp/winner.el b/lisp/winner.el
index e5855ad..29f6429 100644
--- a/lisp/winner.el
+++ b/lisp/winner.el
@@ -315,8 +315,8 @@ You may want to include buffer names such as *Help*, *Apropos*,
         (unless (and (pop alive)
                      (setf (window-point win)
                            (winner-get-point (window-buffer win) win))
-                     (not (member (buffer-name (window-buffer win))
-                                  winner-boring-buffers)))
+                     (not (winner-ignore-buffer
+			   (buffer-name (window-buffer win)))))
           (push win xwins)))            ; delete this window
 
       ;; Restore marks
@@ -335,6 +335,15 @@ You may want to include buffer names such as *Help*, *Apropos*,
               (delete-window (car xwins))
               t))))))
 
+(defun winner-ignore-buffer (buffer-name)
+  (delq
+   nil
+   (mapcar
+    (lambda (boring-spec)
+      (if (functionp boring-spec)
+	  (funcall boring-spec buffer-name)
+	(equal boring-spec buffer-name)))
+    winner-boring-buffers)))
#+end_src

* Modules
** Load path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs")
#+end_src
** Buffer lists
*** Ibuffer
#+begin_src emacs-lisp
(setq ibuffer-show-empty-filter-groups nil)

(defalias 'list-buffers 'ibuffer)

(setq ibuffer-saved-filter-groups
      '(("default"
         ("VBPL"
          (or
           (name . "Papers/structure")
           (name . "^dan\.bib$")))
         ("PoBI"
          (name . "pobi"))
         ("WTCCC2"
          (name . "wtccc2"))
         ("MSG"
          (name . "simsec")
          (name . "Papers/msg"))
         ("shellfish"
          (name . "shellfish"))
         ("Org-babel"
          (name . "babel"))
         ("Org-mode"
          (or (name . "org-mode")
              (name . "^org\.org$")))
         ("Org-buffers"
          (name . "org-buffers"))
         ("Email"
          (or  ;; mail-related buffers
           (mode . message-mode)
           (mode . mail-mode)
           (mode . gnus-group-mode)
           (mode . gnus-summary-mode)
           (mode . gnus-article-mode)
           (name . "newsrc")))
         ("Elisp"
          (or
           (name . "config/emacs")
           (name . "^\\*scratch\\*$")
           (name . "^\\*eshell\\*$")))
         ("Emacs"
          (or
           (name . "^\\*scratch\\*$")
           (name . "^\\*Messages\\*$")))
         ("Org"
          (mode . org-mode))
         ("ERC"
          (mode . erc-mode))
         ("Etc"
          (name . ".")))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

*** Buffer Menu
#+begin_src emacs-lisp
(setq Buffer-menu-sort-column 4)
#+end_src
** Ediff
#+begin_src emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; setting mode-line-format to empty string triggers error in
;; ediff-strip-mode-line-format [Wrong type argument: listp, ""],
;; e.g. when issuing vc-resolve-conflicts
(defun dan/vc-resolve-conflicts ()
  (interactive)
  (let ((mode-line-format " "))
    (vc-resolve-conflicts)))
#+end_src
** Recentf
#+begin_src emacs-lisp
(recentf-mode t)
;; recentf-exclude
(setq recentf-max-saved-items nil)
#+end_src

** Flyspell
#+begin_src emacs-lisp
(setq flyspell-issue-message-flag nil)
#+end_src

** Flymake
#+begin_src emacs-lisp
(require 'flymake)
(defun dan/flymake-pyflakes-init ()
  ;; Make sure it's not a remote buffer or flymake would not work
  ;; tramp-list-remote-buffers doesn't exist in recent tramp
  (when t ;; (not (subsetp (list (current-buffer)) (tramp-list-remote-buffers)))
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                        (file-name-directory buffer-file-name))))
      (list "codequality" (list local-file)))))

(add-to-list 'flymake-allowed-file-name-masks
             '("\\.py\\'" dan/flymake-pyflakes-init))
#+end_src

** Dired
#+begin_src emacs-lisp
(setq dired-listing-switches "-lAX")
(setq dired-no-confirm
      '(byte-compile chgrp chmod chown compress copy hardlink load move print shell symlink
                     touch uncompress))
(setq dired-auto-revert-buffer t)

(require 'dired-x)
(add-hook 'dired-mode-hook (lambda () (dired-omit-mode t)))

;; https://groups.google.com/group/gnu.emacs.help/browse_thread/thread/acb20ee78c00e4ec?pli=1
;; (setq dired-omit-files
;;       (rx (or (seq bol (? ".") "#")         ;; emacs autosave files
;;               (seq bol "." (not (any "."))) ;; dot-files
;;               (seq "~" eol)                 ;; backup-files
;;               (seq bol "CVS" eol)           ;; CVS dirs
;;               )))

(defun dan/dired-delete-total-line ()
  (let ((bro buffer-read-only)
        (kill-whole-line t))
    (save-excursion
      (goto-char (point-min))
      (forward-line)
      (when (looking-at "^ *total used in directory")
        (if bro (setq buffer-read-only nil))
        (kill-line)
        (setq buffer-read-only bro)))))

(add-hook 'dired-after-readin-hook 'dan/dired-delete-total-line)

(defun dan/dired-no-ask ()
  (interactive)
  (dired default-directory))

(setq dired-omit-extensions
      (append dan/ignored-extensions
              dired-latex-unclean-extensions
              dired-bibtex-unclean-extensions
              dired-texinfo-unclean-extensions))
#+end_src
*** Dired for git repo
[[mairix:t:@@m1630s27or.fsf@65-070.eduroam.rwth-aachen.de][Email from Andrea Crotti: Re: Simple useful function]]
#+begin_src emacs-lisp
(defun dan/dired-git-files ()
  (interactive)
  (dired (cons (format "%s [git]" default-directory)
               (dan/ls-git-files))))

(defun dan/ls-git-files ()
  (if (file-exists-p ".git")
      (split-string (shell-command-to-string "git ls-files"))
    (error "Not a git repo")))
#+end_src
** Languages
*** Load path
#+begin_src emacs-lisp
;; (add-to-list 'load-path "~/lib/emacs/ruby-emacs")
(add-to-list 'load-path "~/lib/emacs/gnuplot-mode.0.6.0")
(add-to-list 'load-path "~/lib/emacs/matlab")
#+end_src
*** Elisp
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'pretty-lambdas)
#+end_src
*** C & C++
#+begin_src emacs-lisp
;; Dan Feb 2006: See http://www.xemacs.org/Links/tutorials_1.html
(defun dan/c-c++-mode-hook ()
  "Dan's local settings for c-mode and c++-mode"
  ;; add font-lock to function calls (but also gets if() and while() etc)
  ;; (font-lock-add-keywords
  ;; ? ?nil `(("\\([[:alpha:]_][[:alnum:]_]*\\)(" ?1 font-lock-function-name-face)))
  (setq c-basic-offset 4)
  (setq line-number-mode t))

;; (add-hook 'c-mode-hook 'c++-mode) ;; I want C++ comments, but that seems a bit heavy-handed?
(add-hook 'c-mode-hook 'dan/c-c++-mode-hook)
(add-hook 'c++-mode-hook 'dan/c-c++-mode-hook)

(setq compilation-read-command nil)
#+end_src

*** CSS
http://xahlee.org/emacs/emacs_html.html
#+begin_src emacs-lisp
(defvar dan/hexcolour-keywords
  '(("#[abcdef[:digit:]]\\{6\\}"
     (0 (put-text-property
         (match-beginning 0)
         (match-end 0)
         'face (list :background
                     (match-string-no-properties 0)))))))

(defun dan/hexcolour-add-to-font-lock ()
  (font-lock-add-keywords nil dan/hexcolour-keywords))

(add-hook 'css-mode-hook 'dan/hexcolour-add-to-font-lock)
#+end_src

*** Dot
#+begin_src emacs-lisp
(load-file "~/lib/emacs/graphviz-dot-mode.el")
#+end_src
*** coffee
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/coffee-mode")
(require 'coffee-mode)
(add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
(add-to-list 'auto-mode-alist '("Cakefile" . coffee-mode))
(setq coffee-tab-width 4)
(defun dan/coffee-mode-hook-fun ()
  (set (make-local-variable 'tab-width) coffee-tab-width))
(add-hook 'coffee-mode-hook 'dan/coffee-mode-hook-fun)
(defun dan/coffee-execute ()
  (interactive)
  (shell-command-on-region (point-min) (point-max) "coffee"))
(defun dan/coffee-insert-console-log ()
  (interactive)
  ;; (indent-for-tab-command) coffee indenting is bad
  (insert "console.log "))

(defun dan/coffee-insert-debugger ()
  (interactive)
  ;; (indent-for-tab-command) coffee indenting is bad
  (insert "debugger"))
#+end_src

*** Javascript
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/js2-mode")
(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

(defun dan/scratch-js-in-html ()
  (interactive)
  (find-file "/tmp/scratch.html")
  (delete-region (point-min) (point-max))
  (insert "<html>
<script type=\"text/javascript\">

</script>
</html>")
  (previous-line 2)
  (beginning-of-line))
#+end_src

*** Lua
#+begin_src emacs-lisp
(setq auto-mode-alist (cons '("\\.lua$" . lua-mode) auto-mode-alist))
;; (autoload 'lua-mode "/usr/local/src/lua-mode/lua-mode" "Lua editing mode." t)
;; (add-hook 'lua-mode-hook 'turn-on-font-lock)
#+end_src
*** LaTeX
#+begin_src emacs-lisp
(require 'tex-mode)
(add-hook 'latex-mode-hook 'reftex-mode)
#+end_src
*** TeXinfo
#+begin_src emacs-lisp
(require 'texinfo)
#+end_src

*** Plantuml
#+begin_src emacs-lisp
(dan/require 'plantuml-mode)
#+end_src
*** Python
**** general
#+begin_src emacs-lisp
;; (setenv "PYTHONPATH" (getenv "HOME"))

(defun dan/py-backspace-w-paredit ()
  "backspace binding for python-mode with paredit"
  (interactive)
  (condition-case nil
      (call-interactively
       (if (looking-back "^[ \t]+")
           'python-indent-dedent-line-backspace ;; was py-electric-backspace
         'paredit-backward-delete))
    (error (call-interactively 'delete-backward-char))))

(defun dan/insert-ipdb-set-trace ()
  (interactive)
  (indent-for-tab-command)
  (insert "import ipdb ; ipdb.set_trace()"))
#+end_src

**** Python.el
#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "~/lib/emacs/python.el")
(require 'python)

;; Recommended config from the code comments
(setq
 python-shell-interpreter "ipython"
 python-shell-interpreter-args ""
 python-shell-prompt-regexp "In \\[[0-9]+\\]: "
 python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
 python-shell-completion-setup-code
   "from IPython.core.completerlib import module_completion"
 python-shell-module-completion-string-code
   "';'.join(module_completion('''%s'''))\n"
 python-shell-completion-string-code
   "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")

;; My updates to config
(setq python-shell-interpreter-args "--colors=NoColor"
      python-shell-prompt-regexp ">>> "
      python-shell-prompt-output-regexp "    ")

(defun dan/load-comint-history (&optional file)
  (interactive "fHistory file: ")
  (if (null comint-input-ring)
      (error "This buffer has no comint history"))
  (mapc (lambda (item) (ring-insert+extend comint-input-ring item 'grow))
        (dan/read-comint-history file)))

(defun dan/read-comint-history (file)
  (split-string (with-temp-buffer
                  (insert-file-contents file)
                  (buffer-string)) "\n" t))

(defun dan/dump-comint-history (&optional file)
  (interactive "fHistory file: ")
  (if (null comint-input-ring)
      (error "This buffer has no comint history"))
  (let ((history
         ;; We uniquify on the reversed list in order to maintain the
         ;; most recent occurrence of a command in its position, while
         ;; deleting preceding ones.
         (nreverse
          (org-uniquify
           (nreverse
            (append (dan/read-comint-history file)
                    (ring-elements comint-input-ring)))))))
    (with-temp-buffer
      (insert (mapconcat #'identity history "\n") "\n")
      (write-file file))))

(defun dan/inferior-python-mode-hook-function ()
     (setq truncate-lines t)
     (dan/load-comint-history "~/.ipython/history"))

(defun dan/python-mode-hook-function ()
  (add-to-list (make-local-variable 'comint-dynamic-complete-functions)
               'python-completion-complete-at-point))

(add-hook 'inferior-python-mode-hook
          'dan/inferior-python-mode-hook-function)

(add-hook 'python-mode-hook
          'dan/python-mode-hook-function)

(add-hook 'python-mode-hook 'dan/paredit-nolisp-mode)

(add-hook 'kill-buffer-hook
          (lambda () (when (eq major-mode 'inferior-python-mode)
                  (dan/dump-comint-history "~/.ipython/history"))))


;; (defun pcomplete-inferior-python-setup ()
;;   "Setup `inferior-python-mode' to use pcomplete."
;;   (pcomplete-comint-setup 'comint-dynamic-complete-functions))

;; (add-hook 'inferior-python-mode-hook 'pcomplete-inferior-python-setup)
#+end_src
**** Ropemacs
     Need to
     1. install pymacs python module
	download, make, python setup.py install
     2. pip install rope
     3. pip install ropemode
     4. install ropemacs
	download, make, python setup.py install

#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "~/lib/emacs/Pymacs")
(require 'pymacs)

(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)

;; ropemacs
;; http://stackoverflow.com/questions/2855378/ropemacs-usage-tutorial
(setq ropemacs-enable-shortcuts nil)
(setq ropemacs-local-prefix "C-c C-p")
(pymacs-load "ropemacs" "rope-")



(defun dan/rope-goto-definition-of-thing-read-from-minibuffer (string)
  (interactive "sGo to definition of: ")
  (save-excursion
    (goto-char (point-max))
    (unless (eq (char-before) ?\n) (insert ?\n))
    (insert string)
    (let ((buff (current-buffer)))
      (rope-goto-definition)
      (set-buffer buff)
      (kill-line 0))))

(defalias 'dan/rope-goto-definition-of-thing-at-point 'rope-goto-definition)

(defun dan/rope-goto-definition (&optional arg)
  (interactive "P")
  (push-mark)
  (call-interactively
   (if arg 'dan/rope-goto-definition-of-thing-read-from-minibuffer
     'dan/rope-goto-definition-of-thing-at-point)))
#+end_src
**** pysmell
#+begin_src python :tangle no
(add-to-list 'load-path "~/lib/python/pysmell")
(require 'pysmell)
#+end_src

**** autocomplete
#+begin_src emacs-lisp :tangle no
;; http://stackoverflow.com/questions/2855378/ropemacs-usage-tutorial
(add-to-list 'load-path "~/lib/emacs/auto-complete")
(require 'auto-complete)
(global-auto-complete-mode t)
;; (setq ropemacs-enable-autoimport t)
#+end_src

**** Working with python include lines
#+begin_src emacs-lisp
(defun python-import-bounds-of-python-import-at-point ()
   "Return the start and end points of python-import at current point."
   (let ((characters "A-Za-z_."))
     (save-excursion
       (re-search-backward (concat "[^" characters "]") nil t)
       (forward-char 1)
       (if (looking-at (concat "[" characters "]+"))
           (cons (point) (match-end 0))
         nil))))

(put 'python-import 'bounds-of-thing-at-point
     'python-import-bounds-of-python-import-at-point)
#+end_src

**** Unused
***** Python-mode.el
#+begin_src emacs-lisp :noweb yes :tangle no
(add-to-list 'load-path "~/lib/emacs/python-mode")
(require 'python-mode)
(setq py-python-command-args '("-i" "-colors" "Linux"))
;; (setq py-python-command-args '("--colors" "Linux"))
(setq auto-mode-alist (cons '("\\.pyw$" . python-mode) auto-mode-alist))
<<python-mode-bindings>>

(setq py-shell-switch-buffers-on-execute nil)

(add-to-list 'load-path "~/lib/emacs/ipython")
(require 'ipython)
(setq ipython-command "ipython -colors Linux -classic -nobanner")
;; (setq ipython-completion-command-string
;;       "print(';'.join(__IP.Completer.all_completions('%s')))\n")

(setq org-babel-python-mode 'python-mode)

(defun dan/py-execute-region ()
  (interactive)
  (let ((cwf (current-window-configuration)))
    ;; Why doesn't s-w-e prevent window disruption?
    (save-window-excursion
      (condition-case nil
          (call-interactively 'py-execute-region)
        (error nil)))
    (set-window-configuration cwf)))

(defun dan/py-eval-line ()
  (interactive)
  (save-excursion
    (save-window-excursion
      (ignore-errors
        (py-execute-region (point-at-bol) (point-at-eol)))))
  (forward-line 1))

(defun dan/turn-on-python-mode-syntax-highlighting ()
  (interactive)
  (set (make-local-variable 'font-lock-defaults)
       '(python-font-lock-keywords nil nil nil nil
                                   (font-lock-syntactic-keywords
                                    . python-font-lock-syntactic-keywords))))

(defun dan/django-shell ()
  (interactive)
  (let ((py-which-args '("./manage.py"  "shell")))
    (py-shell)))
#+end_src
*** Shell
#+begin_src emacs-lisp
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'shell-mode-hook
          (lambda()
            (comint-send-input)
            (recenter-top-bottom 0)))
#+end_src
*** Eshell
#+begin_src emacs-lisp
(add-hook 'eshell-mode-hook 'dan/set-executable-paths)
(add-hook 'eshell-mode-hook 'paredit-mode)

(setq eshell-banner-message ""
      eshell-scroll-show-maximum-output nil)

(setq eshell-input-filter
      (lambda (str)
        (not
         (or
          ;; The default: don't store all whitespace
          (string-match "\\`\\s-*\\'" str)
          ;; Don't store consecutive identical input
          (string= str (nth 0 (ring-elements eshell-history-ring)))))))
#+end_src
*** ESS
**** Misc
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/ess/lisp")
(when (dan/require 'ess-site)

  ;; (require 'ess-eldoc)

  (setq ess-ask-for-ess-directory t)
  (setq inferior-R-args "--no-save --no-restore-data --silent")
  (setq safe-local-variable-values '((noweb-default-code-mode . R-mode) (outline-minor-mode)))
  (autoload 'noweb-mode "noweb-mode" "Editing noweb files." t) ;; see noweb-mode.el in ESS;
  (setq auto-mode-alist (append (list (cons "\\.nw$" 'noweb-mode))
                                auto-mode-alist))

  ;; (defun dan/ess-and-iess-mode-hook ()
  ;;   (setq ess-function-template " <- function() {\n\n}\n")
  ;;   (mapc (lambda (pair) (local-set-key (car pair) (cdr pair)))
  ;;        dan/ess-and-iess-keybindings))

  (defun dan/ess-mode-hook ()
    (ess-set-style 'C++))

  ;; (add-hook 'ess-mode-hook 'dan/ess-and-iess-mode-hook)
  ;; (add-hook 'inferior-ess-mode-hook 'dan/ess-and-iess-mode-hook)
  (add-hook 'ess-mode-hook 'dan/ess-mode-hook)

  (setq ess-eval-visibly-p nil)

  ;;                                 DEF GNU BSD K&R C++
  ;; ess-indent-level                  2   2   8   5   4
  ;; ess-continued-statement-offset    2   2   8   5   4
  ;; ess-brace-offset                  0   0  -8  -5  -4
  ;; ess-arg-function-offset           2   4   0   0   0
  ;; ess-expression-offset             4   2   8   5   4
  ;; ess-else-offset                   0   0   0   0   0
  ;; ess-close-brace-offset            0   0   0   0   0

  (defun dan/ess-execute-command-on-region (cmd)
    (interactive "sEnter function name: \n")
    (ess-execute
     (concat cmd "(" (buffer-substring (point) (mark)) ")"))))

#+end_src

**** Add R builtins to font lock
     :PROPERTIES:
     :tangle: no
     :END:

#+source: R-builtins
#+begin_src R
obj <- unlist(sapply(c("package:base","package:stats","package:utils","package:grDevices"), objects, all.names=TRUE))
re <- "(^[^.[:alpha:][:digit:]]|<-|__)"  ## to remove "weird" functions
obj[-grep(re, obj)]
#+end_src

#+begin_src emacs-lisp :var R-builtins=R-builtins()
(add-to-list
 'ess-R-mode-font-lock-keywords
 (cons
  (concat "\\<" (regexp-opt (mapcar #'car R-builtins) 'enc-paren) "\\>")
  'font-lock-function-name-face))
#+end_src

** Bbdb
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/bbdb/lisp")
(require 'bbdb)
(require 'bbdb-gnus)
(bbdb-initialize)
#+end_src

** Buffer-join
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/buffer-join")
;; (dan/require 'buffer-join)
#+end_src

** Color-theme
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/color-theme-6.6.0")
(dan/require 'color-theme)
;; (dan/require 'zenburn)
;; (dan/require 'color-theme-chocolate-rain)
(load-file "~/lib/emacs/color-theme-railscasts/color-theme-railscasts.el")
(color-theme-railscasts)
#+end_src

** Elpa
#+begin_src emacs-lisp
(let ((elpa-file
       (expand-file-name "~/.emacs.d/elpa/package.el")))
  (if (and (file-exists-p elpa-file)
           (load elpa-file))
      (package-initialize)))
#+end_src
** Google Search
#+begin_src emacs-lisp
(defun dan/google ()
  (interactive)
  (shell-command
   (format "google '%s'"
           (if (region-active-p)
               (buffer-substring (region-beginning)
                                 (region-end))
             (read-from-minibuffer "Search string: ")))))
#+end_src

** Google Maps
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/google-maps")
(dan/require 'google-maps)
#+end_src
** Google Weather
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/google-weather-el")
(dan/require 'google-weather)
(dan/require 'org-google-weather)
#+end_src

** Gnugol
#+begin_src emacs-lisp
(require 'gnugol)
#+end_src

** Gnus lite
#+begin_src emacs-lisp :tangle gnus-bug.el
(setq gnus-select-method '(nntp "news.gmane.org"))

(setq gnus-summary-line-format
      (concat
       "%0{%U%R%z%}"
       "%3{%}" "%1{%~(pad-right 9)&user-date;%}" "%3{|%}" ;; date
       "  "
       "%4{%-20,20f%}"               ;; name
       "  "
       "%3{|%}"
       " "
       "%1{%B%}"
       "%s\n"))

(setq gnus-sum-thread-tree-indent " ")
(setq gnus-sum-thread-tree-root "♽ " )
(setq gnus-sum-thread-tree-false-root "")
(setq gnus-sum-thread-tree-single-indent "")
(setq gnus-sum-thread-tree-vertical        "|")
(setq gnus-sum-thread-tree-leaf-with-other "├─► ")
(setq gnus-sum-thread-tree-single-leaf     "╰─► ")
(setq gnus-thread-sort-functions
      '(gnus-thread-sort-by-number
        gnus-thread-sort-by-most-recent-date))

(setq gnus-summary-thread-gathering-function
      'gnus-gather-threads-by-references)

(setq gnus-user-date-format-alist
      '(((gnus-seconds-today) . "    %k:%M")
        (604800 . "%a %k:%M")
        ((gnus-seconds-month)
         . "%a %d")
        ((gnus-seconds-year)
         . "%b %d")
        (t . "%b %d '%y")))
#+end_src

** Gnus
*** General
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/gnus/lisp")
(require 'gnus-load)
;; (require 'nnir) ?necessary?
;; need to add this to select methods for searching?
;; (nnir-search-engine imap)

(setq user-full-name "Dan Davison")
(case dan/operating-system
  ('darwin
   ;; ~/.authinfo entries:
   ;; machine counsyl login davison@counsyl.com password xxx port 993
   ;; machine gmail login dandavison7@gmail.com password xxx port 993
   (setq user-mail-address "dandavison7@gmail.com")
   (setq gnus-ignored-newsgroups "") ;; "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\”]\”[#’()]")
   (setq gnus-select-method
         '(nntp "news.gmane.org"))
   (setq gnus-secondary-select-methods
         '((nntp "news.eternal-september.org")
           (nntp "news.gwene.org")
           (nnimap "counsyl"
                   (nnimap-address "imap.gmail.com")
                   (nnimap-server-port 993)
                   (nnimap-stream ssl))
           (nnimap "gmail"
                   (nnimap-address "imap.gmail.com")
                   (nnimap-server-port 993)
                   (nnimap-stream ssl)))))
  ('linux
   (setq user-mail-address "dandavison7@gmail.com")
   (setq gnus-select-method
         '(nnimap "dc"
                  (nnimap-address "localhost")
                  (nnimap-authinfo-file "~/config/email/authinfo")))
   (setq gnus-secondary-select-methods
         '((nntp "news.gmane.org")
           (nntp "news.eternal-september.org")
           (nntp "news.gwene.org")))
   (require 'nnmairix)))

(setq gnus-save-newsrc-file nil)
(setq gnus-always-read-dribble-file t)
(setq gnus-novice-user nil)
(setq gnus-expert-user t)

(add-hook
 'gnus-after-exiting-gnus-hook
 (lambda () (if (get-buffer "*Group*") (kill-buffer "*Group*"))))
#+end_src

*** Sending
#+begin_src emacs-lisp
(case dan/operating-system
  ('darwin
   (setq message-send-mail-function 'smtpmail-send-it
         smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
         smtpmail-auth-credentials '(("smtp.gmail.com" 587 "dandavison7@gmail.com" nil))
         smtpmail-default-smtp-server "smtp.gmail.com"
         smtpmail-smtp-server "smtp.gmail.com"
         smtpmail-smtp-service 587))
  ('linux
   (setq
    mail-user-agent 'message-user-agent ;; so that org-mime-org-buffer-htmlize uses message-mode
    send-mail-function 'sendmail-send-it ;; generates properly-formed email and sends it with
    sendmail-program "~/bin/sendmail-dan" ;; passes email over ssh to remote sendmail in Oxford
    gnus-message-archive-group "nnimap+dc:email" ;; save outgoing mail into my default mail box
    gnus-gcc-mark-as-read nil))) ;; Sent mail appears as unread in my inbox
#+end_src

*** Group buffer
#+begin_src emacs-lisp
(defun dan/gnus-group-sort (info1 info2)
  "Sort alphabetically."
  (cond
   ((string= info1 "email") nil)
   ((string= info2 "email") t)
   (t (not (gnus-group-sort-by-alphabet info1 info2)))))

(setq gnus-group-sort-function 'dan/gnus-group-sort)
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
;; (add-hook 'gnus-group-mode-hook 'dan/yas-tab-setup)
(add-hook 'gnus-group-mode-hook 'yas/minor-mode-off)
(setq gnus-group-uncollapsed-levels 2)
#+end_src

**** Topics
#+begin_src emacs-lisp
;; Create three face types.
(setq gnus-face-1 'bold)
(setq gnus-face-3 'italic)

;; We want the article count to be in
;; a bold and green face.  So we create
;; a new face called `my-green-bold'.
(copy-face 'bold 'my-green-bold)
(copy-face 'bold 'my-blue-bold)
;; Set the color.
(set-face-foreground 'my-green-bold "ForestGreen")
(set-face-foreground 'my-blue-bold "LightSeaGreen")
(setq gnus-face-2 'my-green-bold)
(setq gnus-face-4 'my-blue-bold)

;; Set the new & fancy format.
(setq gnus-topic-line-format "%i%2{* %n%} [%A]%v\n"
      gnus-group-line-format "%P%p%5y:%B%4{%c%}\n")  ;; %M%S%p%P%5y:%B%(%g%)%O\n
#+end_src

*** Summary buffer
#+begin_src emacs-lisp
;;; Summary Buffer
;;;
(when nil
  (add-hook 'gnus-summary-prepare-hook
            (lambda () (end-of-buffer) (forward-line -1)))

  (add-hook 'gnus-summary-prepared-hook
            (lambda () (end-of-buffer) (forward-line -1))))

(setq gnus-thread-sort-functions
      '(gnus-thread-sort-by-number
        gnus-thread-sort-by-most-recent-date))

(setq gnus-summary-thread-gathering-function
      'gnus-gather-threads-by-references)

(setq gnus-user-date-format-alist
      '(((gnus-seconds-today) . "    %k:%M")
        (604800 . "%a %k:%M")
        ((gnus-seconds-month)
         . "%a %d")
        ((gnus-seconds-year)
         . "%b %d")
        (t . "%b %d '%y")))

;; note that either | or │ could be used in here
(setq gnus-summary-line-format
      (concat
       "%0{%U%R%z%}"
       "%3{|%}" "%1{%~(pad-right 9)&user-date;%}" "%3{|%}" ;; date
       "  "
       "%4{%-20,20f%}"               ;; name
       "  "
       "%3{|%}"
       " "
       "%1{%B%}"
       "%s\n"))

;; http://groups.google.com/group/gnu.emacs.gnus/browse_thread/thread/a673a74356e7141f
(setq gnus-sum-thread-tree-indent " ")
(setq gnus-sum-thread-tree-root "♽ " )             ; ●  ⚈
(setq gnus-sum-thread-tree-false-root "")          ; ◯   ♽
(setq gnus-sum-thread-tree-single-indent "")       ; ◎
(setq gnus-sum-thread-tree-vertical        "│")    ; │┆ ┋ ┆
(setq gnus-sum-thread-tree-leaf-with-other "├─► ") ; ┣━►   ▶
(setq gnus-sum-thread-tree-single-leaf     "╰─► ") ; ┗━►

(setq gnus-summary-display-arrow t)

(fset 'dan/gnus-summary-tick-thread "MPt\M-&!")
#+end_src
*** Posting styles

See Info node `(gnus)Posting Styles'.

             ("nnml:.*"
              (From (with-current-buffer gnus-article-buffer
                      (message-fetch-field "to"))))
             ("^nn.+:"
              (signature-file "~/.mail-signature"))))

   The `nnml:.*' rule means that you use the `To' address as the `From'
address in all your outgoing replies, which might be handy if you fill
many roles.  You may also use `message-alternative-emails' instead.
*Note Message Headers: (message)Message Headers.


#+begin_src emacs-lisp
(setq gnus-posting-styles
      '(((header "from" "@counsyl\.com")
         (address "davison@counsyl.com"))))
#+end_src

*** Correct counts
#+begin_src emacs-lisp :tangle no
;;; dim-gnus-imap-count.el --- Dimitri Fontaine
;;
;; http://www.emacswiki.org/emacs/GnusNiftyTricks#toc2

(defun dim/gnus-user-format-function-t (dummy)
  (case (car gnus-tmp-method)
    (nnimap
     (message gnus-tmp-qualified-group)
     (let ((count (dim/nnimap-request-message-count
                   gnus-tmp-qualified-group gnus-tmp-news-server)))
       (if count
           (format "%d" (car count))
         "?")))
    (t
     gnus-tmp-number-total)))

(defun dim/gnus-user-format-function-y (dummy)
  (case (car gnus-tmp-method)
    (nnimap
     (let ((count (dim/nnimap-request-message-count
                   gnus-tmp-qualified-group gnus-tmp-news-server)))
       (if count
           (format "%d" (cadr count))
         "?")))
    (t
     gnus-tmp-number-of-unread)))

(defvar dim/nnimap-message-count-cache-alist nil)

(defun dim/nnimap-message-count-cache-clear nil
  (setq dim/nnimap-message-count-cache-alist nil))

(defun dim/nnimap-message-count-cache-get (mbox &optional server)
  (when (nnimap-possibly-change-server server)
    (cadr (assoc (concat nnimap-current-server ":" mbox)
                 nnimap-message-count-cache-alist))))

(defun dim/nnimap-message-count-cache-set (mbox count &optional server)
  (when (nnimap-possibly-change-server server)
    (push (list (concat nnimap-current-server ":" mbox)
                count) nnimap-message-count-cache-alist))
  count)

(defun dim/nnimap-request-message-count (mbox &optional server)
  (let ((count (or (dim/nnimap-message-count-cache-get mbox server)
                   (and (nnimap-possibly-change-server server)
                        (progn
                          (message "Requesting message count for %s..."
                                   mbox)
                          (prog1
                              (imap-mailbox-status
                               mbox '(messages unseen) nnimap-server-buffer)
                            (message "Requesting message count for %s...done"
                                     mbox)))))))
    (when count
      (dim/nnimap-message-count-cache-set mbox count server))
    count))

(add-hook 'gnus-after-getting-new-news-hook 'dim/nnimap-message-count-cache-clear)

(provide 'dim-gnus-imap-count)
#+end_src

*** Article buffer
#+begin_src emacs-lisp
;;; Article buffer
;;;
(require 'gnus-art) ; ??

(setq gnus-visible-headers "^From:\\|^To:\\|^Cc:\\|^Subject:\\|^Date:\\|^User-Agent:\\|^X-Newsreader:")
;; Specify the order of the header lines
(setq gnus-sorted-header-list '("^From:" "^Subject:" "^User-Agent:" "^X-Newsreader:" "^Date:"))

(setq message-mode-hook (quote (orgstruct++-mode)))

(setq mm-discouraged-alternatives '("text/html" "text/richtext"))
(setq gnus-article-update-date-headers 30)
#+end_src

*** Cache
#+begin_src emacs-lisp
(setq gnus-use-cache t
      gnus-cacheable-groups "^nntp.*emacs\\.orgmode")
#+end_src
*** Personal functions
#+begin_src emacs-lisp
(defun dan/gnus-article-goto-next-article ()
  (interactive)
  (with-current-buffer gnus-summary-buffer
    (gnus-summary-goto-article (gnus-summary-next-article))))

(defun dan/gnus-summary-delete-article ()
  ;; How come this deletes all articles in the active region?
  (interactive)
  (save-window-excursion
    (gnus-summary-delete-article)
    (gnus-summary-next-article)))

(defun ded/mml-fill-paragraph ()
  "Fill paragraph, but without messing with the email header"
  (interactive)
  (let ((beg (save-excursion
               (when (search-backward "--text follows this line--" nil t)
                 (forward-line 1) (point)))))
    (when beg
      (narrow-to-region beg (point-max))
      (fill-paragraph)
      (widen))))
#+end_src
*** Atom2RSS
    :PROPERTIES:
    :tangle: no
    :END:

#+begin_src emacs-lisp
(require 'mm-url)

(defvar dan/atom2rss-file "/usr/local/src/atom2rss.xsl"
  "Location of atom2rss.xsl")

(defadvice mm-url-insert (after DE-convert-atom-to-rss () )
  "Converts atom to RSS by calling xsltproc."
  (when (re-search-forward "xmlns=\"http://www.w3.org/.*/Atom\""
                           nil t)
    (goto-char (point-min))
    (message "Converting Atom to RSS... ")
    (call-process-region (point-min) (point-max)
                         "xsltproc"
                         t t nil
                         (expand-file-name dan/atom2rss-file) "-")
    (goto-char (point-min))
    (message "Converting Atom to RSS... done")))

(ad-activate 'mm-url-insert)
#+end_src

** Hide-lines
#+begin_src emacs-lisp
(require 'hide-lines)
#+end_src

** Mo git blame
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/mo-git-blame")
(require 'mo-git-blame)
#+end_src

** Magit
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/magit")
(dan/require 'magit)
(setq magit-save-some-buffers nil)
(setq magit-process-popup-time 1)
(setq magit-revert-item-confirm t)
(defun dan/magit-status (&optional arg)
  (interactive "P")
  (call-interactively 'magit-status)
  (unless arg (delete-other-windows)))
(defun dan/magit-kill-git-process ()
  (interactive)
  ;; (kill-process magit-process) ? doesn't do what I want.
  (kill-buffer magit-process-buffer-name))

(set-face-attribute 'magit-diff-add nil :foreground "Green")
(set-face-attribute 'magit-diff-del nil :foreground "Red")
(set-face-attribute 'magit-item-highlight nil :background "#01294A") ;; "#01395C"
(set-face-attribute 'magit-diff-hunk-header nil :background "keyboardFocusIndicatorColor")
;; (set-face-attribute 'magit-item-highlight nil :background "secondarySelectedControlColor")
#+end_src
** Misc
#+begin_src emacs-lisp
(dan/require 'regex-tool)
(dan/require 'unbound)
(dan/require 'windresize)
(dan/require 'xclip)
(dan/require 'highlight-parentheses)
(highlight-parentheses-mode)
(dan/require 'boxquote)
;; (load "~/lib/emacs/nxhtml/autostart.el")
;; (load "R-anything-config")
(dan/require 'ssh)
;; (dan/require 'google-search)
;; (dan/require 'w3m)
;; (dan/require 'gnuplot)
;; (dan/require 'filladapt)
#+end_src

** Minimal
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/minimal")
(when (dan/require 'minimal)
  (minimal-mode t)
  (setq minimal-mode-line-background "sea green")
  (setq minimal-mode-line-inactive-background "dim grey"))
#+end_src

** Paredit
#+begin_src emacs-lisp
(require 'paredit)
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (condition-case nil
                (paredit-mode)
              (error (message "Failed to activate paredit mode")))))


(defun dan/paredit-nolisp-mode ()
  "Turn on paredit for languages like python, R, C"
  ;; Don't insert space before parentheses
  (interactive)
  (condition-case nil
      (progn
        (paredit-mode)
        (set (make-local-variable
              'paredit-space-for-delimiter-predicates)
             '((lambda (&rest args) nil)))
        ;; Use paredit for {}
        (local-set-key "{" 'paredit-open-curly)
        (local-set-key "'" 'dan/paredit-singlequote)        
        (local-set-key [backspace] 'dan/py-backspace-w-paredit))
    (error (message "Failed to activate paredit mode"))))

(add-hook 'ess-mode-hook 'dan/paredit-nolisp-mode)
(add-hook 'inferior-ess-mode-hook 'dan/paredit-nolisp-mode)
(add-hook 'comint-mode-hook 'dan/paredit-nolisp-mode)

(defun dan/paredit-forward-token-w-parens ()
  (interactive)
  (forward-symbol)
  (if (looking-at "(") (forward-sexp)))

;; http://stackoverflow.com/questions/2665292/how-can-i-get-paredit-mode-when-doing-eval-expression
(defun dan/configure-minibuffer-for-lisp ()
  (when (eq this-command 'eval-expression)
    (setq completion-at-point-functions '(lisp-completion-at-point t))
    (local-set-key [tab] 'complete-symbol)
    (paredit-mode 1)))
(add-hook 'minibuffer-setup-hook 'dan/configure-minibuffer-for-lisp)

(defun dan/paredit-singlequote (&optional n)
  "Copied from `paredit-doublequote'"
  (interactive "P")
  (if (null paredit-mode) (insert "'")
    (cond ((paredit-in-string-p)
           (if (eq (cdr (paredit-string-start+end-points))
                   (point))
               (forward-char) ; We're on the closing quote.
             (insert ?\\ ?\' )))
          ((paredit-in-comment-p)
           (insert ?\' ))
          ((not (paredit-in-char-p))
           (paredit-insert-pair n ?\' ?\' 'paredit-forward-for-quote)))))
#+end_src

** Tramp
#+begin_src emacs-lisp
(require 'tramp) (condition-case nil (require 'tramp-sh) (error nil))
(setq tramp-remote-path (append tramp-remote-path (list "~/bin")))
#+end_src

** Yasnippet
#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "~/lib/emacs/yasnippet")
(when (dan/require 'yasnippet)
  (setq yas/extra-mode-hooks nil)
  (yas/initialize)
  (mapc (lambda (dir)
          (let ((dir (expand-file-name dir)))
            (if (file-exists-p dir) (yas/load-directory dir))))
        '("~/lib/emacs/yasnippet/snippets"
          "~/lib/emacs/Worg/org-contrib/babel/snippets"
          "~/lib/emacs/yasnippet-ess"))

  (defun dan/yas-tab-setup ()
    ;; Initially by Eric for Org-mode hook
    (interactive)
    (make-variable-buffer-local 'yas/trigger-key)
    (setq yas/trigger-key [tab])
    (define-key yas/keymap [tab] 'yas/next-field-group)))
#+end_src
** Org
*** Functions
**** Table import
#+begin_src emacs-lisp
(defun dan/org-table-import ()
  (interactive)
  (let* ((table-file buffer-file-name)
         (org-buffer (concat (file-name-nondirectory table-file) ".org")))
    (when (get-buffer org-buffer)
      (kill-buffer org-buffer))
    (switch-to-buffer org-buffer)
      (org-mode)
      (org-table-import table-file nil)))
#+end_src

**** Toggle src content indentation
#+begin_src emacs-lisp
(defun dan/toggle-org-src-content-indentation ()
  (interactive)
  (message
   (format
    "Local content indentation set to %d"
    (org-set-local
     'org-edit-src-content-indentation
     (if (eq org-edit-src-content-indentation 0) 2 0)))))
#+end_src

**** Toggle inline image updates after execute
#+begin_src emacs-lisp
(defun dan/org-toggle-display-inline-images-after-execution ()
  (interactive)
  (let ((hook 'org-babel-after-execute-hook)
        (fun 'org-display-inline-images))
    (message
     "Inline image display after execute %s"
     (if (memq fun (eval hook))
         (progn (remove-hook hook fun) "off")
       (add-hook hook fun) "on"))))
#+end_src

**** Org occur lines
#+begin_src emacs-lisp
(defun dan/find-in-buffer ()
  (interactive)
  (let ((targets
         `(("<named src blocks>" . ,org-babel-src-name-regexp)
           ("<src block results>" . ,org-babel-result-regexp))))
    (occur
     (cdr
      (assoc
       (ido-completing-read "Find: " (mapcar #'car targets))
       targets)))
    (other-window 1)))
#+end_src

**** Toggle eval on export
#+begin_src emacs-lisp
(defun dan/toggle-org-export-babel-evaluate ()
  (interactive)
  (message
   "org-export-babel-evaluate %s"
   (if (setq org-export-babel-evaluate (not org-export-babel-evaluate))
       "on" "off")))
#+end_src

**** Search in buffer
#+begin_src emacs-lisp
(fset 'dan/org-search-in-buffer "\C-ca<s")
#+end_src

**** Hide subtree
#+begin_src emacs-lisp
(defun dan/hide-subtree ()
  (interactive)
  (hide-subtree)
  (org-beginning-of-line))
#+end_src

**** List supported laguages
#+begin_src emacs-lisp
(require 'cl)
(defun dan/org-babel-list-supported-languages ()
  (interactive)
  (sort
   (set-difference
    (mapcar
     (lambda (s) (intern (progn (string-match "^ob-\\(.+\\)\.el$" s)
                                (match-string 1 s))))
     (directory-files
      (save-window-excursion
        (file-name-directory
         (buffer-file-name (find-library "ob"))))
      nil "^ob-.+\.el$"))
    '(comint eval exp keys lob ref table tangle))
   (lambda (x y) (string< (downcase (symbol-name x))
                          (downcase (symbol-name y))))))
#+end_src

**** Show all including blocks
#+begin_src emacs-lisp
(defun dan/org-show-all ()
  (interactive)
  (let ((org-hide-block-startup nil))
    (org-mode)
    (show-all)))
#+end_src

**** Search in org source code
#+begin_src emacs-lisp
(setq dan/org-mode-src-dir "~/lib/emacs/org")

(defun dan/org-search-src ()
  "Search for REGEXP in Org-mode source code."
  (interactive)
  (lgrep
   (if (region-active-p)
       (buffer-substring (region-beginning) (region-end))
     (org-completing-read "Regexp: "))
   "*.el" (concat dan/org-mode-src-dir "/lisp")))
#+end_src

**** Search in org files
     [[gnus:nntp%2Bnews.gmane.org:gmane.emacs.orgmode#87eicxzkdw.fsf@archdesk.localdomain][Email from Matt Lundin: Re: Search files in a folder]]
#+begin_src emacs-lisp
(defun ml/org-grep (search &optional context)
  "Search for word in org files.

Prefix argument determines number of lines."
  (interactive "sSearch for: \nP")
  (let ((grep-find-ignored-files '("#*" ".#*"))
        (grep-template (concat "grep <X> -i -nH "
                               (when context
                                 (concat "-C" (number-to-string context)))
                               " -e <R> <F>")))
    (lgrep search "*org*" "/home/dan/org/")))

(global-set-key (kbd "<f7>") 'ml/org-grep)
#+end_src

**** dan/org-edit-special
      Needs more work to keep point in sensible location, and to
      detect when inside a block.

#+begin_src emacs-lisp
(defun dan/org-edit-special ()
  (interactive)
  (if (save-excursion
        (re-search-forward
         (concat "\\("
                 org-babel-src-block-regexp
                 "\\|"
                 "^[ \t]*|" ;; table
                 "\\)") nil t))
      (org-edit-special)
    (message "No target found")))
#+end_src

**** org-insert-link-maybe
#+begin_src emacs-lisp
(defun org-insert-link-maybe ()
  "Insert a file link depending on the context"
  (interactive)
  (let ((case-fold-search t))
    (if (save-excursion
          (when (re-search-backward "[[:space:]]" nil t)
            (forward-char 1)
            (looking-at "\\[?\\[?file:?\\(?:[ \t\n]\\|\\'\\)")))
        (progn (replace-match "") (org-insert-link '(4)) t)
      nil)))

;; (add-hook 'org-tab-first-hook 'org-insert-link-maybe)
#+end_src
**** Link to magit mode
      [[mairix:t:@@4A86B7D9.6080805@cs.tu-berlin.de][Email from Stephan Schmitt: {Orgmode} link to magit-status]]
#+begin_src emacs-lisp
(defun org-magit-store-link ()
  "Store a link to a directory to open with magit."
  (when (eq major-mode 'magit-mode)
    (let* ((dir default-directory)
           (link (org-make-link "magit:" dir))
           (desc (abbreviate-file-name dir)))
      (org-store-link-props :type "magit" :link link :description desc)
      link)))

(defun org-magit-open (dir)
  "Follow a magit link to DIR."
  (magit-status dir))

(org-add-link-type "magit" 'org-magit-open nil)
(add-hook 'org-store-link-functions 'org-magit-store-link)
#+end_src

**** Etc
#+begin_src emacs-lisp
(defun dan/org-read-subtrees ()
  "Return subtrees as a list of strings"
  (let ((subtrees))
    (while (or (looking-at "^*") (outline-next-heading))
      (outline-mark-subtree)
      (setq subtrees (cons (buffer-substring (point) (mark)) subtrees))
      (goto-char (mark)))
    (nreverse subtrees)))

(defun dan/org-reverse-subtrees ()
  "Reverse the order of all subtrees.

Should start by setting restriction?
"
  (interactive)
  (beginning-of-line)
  (let ((subtrees (dan/org-read-subtrees)))
    (beginning-of-buffer)
    (delete-region (point) (mark))
    (insert (mapconcat 'identity (nreverse subtrees) "\n"))))
#+end_src

**** Htmlize with images
Based on
https://stat.ethz.ch/pipermail/ess-help/2009-August/005478.html
by Vitalie S.
#+begin_src emacs-lisp
(defun dan/htmlize-buffer-with-org-images ()
  "Convert buffer to html, including embedded images."
  (interactive)
  (save-excursion
    (switch-to-buffer (htmlize-buffer (current-buffer)))
    (goto-char (point-min))
    (while (re-search-forward "<span class=\"org-link\">file:\\(.+\\)</span>" nil t)
      (replace-match (concat "<img src='\\1'/>")))))
#+end_src

*** Basics
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'load-path (expand-file-name "~/lib/emacs/org/contrib/lisp"))
(require 'org-latex)
#+end_src
*** Extras
#+begin_src emacs-lisp
(dan/require 'org-inlinetask)
(dan/require 'org-special-blocks)
#+end_src

*** Hook
#+begin_src emacs-lisp
;; (org-indent-mode t)
;; (add-hook 'org-mode-hook 'dan/yas-tab-setup)
#+end_src
*** Misc
#+begin_src emacs-lisp
(setq org-hide-block-startup nil)

;; (setq org-startup-folded nil)
;;* refiling
;; http://doc.norang.ca/org-mode.html#Refiling

;; Use IDO for target completion
(setq org-completion-use-ido t)

;; Targets include this file and any file contributing to the agenda - up to 5 levels deep
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5))))

;; Targets start with the file name - allows creating level 1 tasks
(setq org-refile-use-outline-path 'file)

;; Targets complete in steps so we start with filename, TAB shows the next level of targets etc
(setq org-outline-path-complete-in-steps t)


;; was near saveplace code; not sure whether helpful
(add-hook 'org-mode-hook
          (lambda ()
            (when (outline-invisible-p)
              (save-excursion
                (outline-previous-visible-heading 1)
                (org-show-subtree)))))
#+end_src

*** Appearance
#+begin_src emacs-lisp
(setq org-hide-leading-stars t)
(setq org-hidden-keywords '(title date author))
#+end_src
**** Set outline colors
     :PROPERTIES:
     :tangle: no
     :END:

#+function: outline-colours
#+begin_src R
require("RColorBrewer")
brewer.pal(n=8, name="Set1")
#+end_src

#+begin_src emacs-lisp :expand yes :var colours=outline-colours()
(dotimes (level 8)
  (set-face-foreground
   (intern (concat "outline-" (number-to-string (1+ level))))
   (car (nth level colours))))
#+end_src

*** Structure & Navigation
#+begin_src emacs-lisp
;; (setq org-odd-levels-only t)
(setq org-empty-line-terminates-plain-lists t)
(setq org-return-follows-link t)
(setq org-special-ctrl-a/e t)
(setq org-cycle-emulate-tab t)
#+end_src
    See also [[mairix:t:@@20524da70908071211y4aeb4c0se9a465e2ebe27a8f@mail.gmail.com][Email from Samuel Wales: {Orgmode} Arrow + RET navigati]]

**** Speed commands
***** Turn on
#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src
***** My speed commands
#+begin_src emacs-lisp :tangle no
(defun dan/org-show-next-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-next-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

(defun dan/org-show-previous-heading-tidily ()
  "Show previous entry, keeping other entries closed."
  (let ((pos (point)))
    (outline-previous-heading)
    (unless (and (< (point) pos) (bolp) (org-on-heading-p))
      (goto-char pos)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

(add-to-list 'org-speed-commands-user
             '("n" dan/org-show-next-heading-tidily))
(add-to-list 'org-speed-commands-user
             '("p" dan/org-show-previous-heading-tidily))
#+end_src

*** Remember
#+begin_src emacs-lisp
;;* remember
(org-remember-insinuate)
(setq org-default-notes-file "~/org/etc.org")
;; (setq org-remember-default-headline "top")
(setq org-remember-templates
      '(
        ("work" ?w "* TODO %?\nSCHEDULED: %^T  %i" "~/org/work.org" 'top)
        ("task" ?t "* TODO %?\nSCHEDULED: %^T\n  %i" "~/org/tasks.org" 'top)
        ("event" ?e "* %?\n%^T\n %i" "~/org/events.org" 'top)
        ("computing" ?c "* TODO %?\n  %i" "~/org/computing.org" 'top)
        ("org" ?o "* TODO %?\n  %i" "~/org/org.org")
        ("notes" ?n "* %?\n  %i" "~/org/notes.org" 'top)
        ("dbm" ?d "* TODO %?\n  %i" "~/org/dbm.org" 'top)
        ("music" ?m "* %?\n %i" "~/org/music.org" 'top)
        ("people" ?p "* TODO %?\nSCHEDULED: %^T\n  %i" "~/org/people.org" 'top)
        ("info" ?i "* %?\n %i" "~/zzz/info.org" 'top)
        ))
#+end_src

**** Quick schedule task with link
#+begin_src emacs-lisp
(defun dan/org-schedule-task-with-link (remember-target-char &optional arg)
  "Schedule a task with a link to current buffer.
   This uses org-remember. The task is scheduled for today, and
may use one of several remember targets"
  (interactive "cSelect remember target: [w]ork [t]asks [p]eople [c]omputing")
  (case remember-target-char
    (?w (kmacro-exec-ring-item
         (quote ([3 108 f8 ?w return 3 12 up return return 3 3] 0 "%d")) arg))
    (?t (kmacro-exec-ring-item
         (quote ([3 108 f8 ?t return 3 12 up return return 3 3] 0 "%d")) arg))
    (?c (kmacro-exec-ring-item
         (quote ([3 108 f8 ?c return 3 12 up return return 3 3] 0 "%d")) arg))
    (?p (kmacro-exec-ring-item
         (quote ([3 108 f8 ?p return 3 12 up return return 3 3] 0 "%d")) arg))))
#+end_src
	   Or maybe I can use fset like in the following?
***** Tiago Magalhaes ess-help post
	From: Luis F <respostas17@gmail.com>
	Subject: [ESS] Pushing Lines from one Window to Another
	Date: Sat, 14 Nov 2009 16:32:42 +0000
	To: ess-help@stat.math.ethz.ch

	Dear Mailing list,

	2 questions:

	A)
	Some time ago I asked whether it was possible to push a line from one window
	to a bottom window. (post here:
	https://stat.ethz.ch/pipermail/ess-help/2008-November/004949.html)

	Charles C. Berry suggested the following command (written by Tim Hesterberg)

#+begin_src emacs-lisp :tangle no
(fset 'push-line-other-window
      "\C-@\C-e\M-w\C-n\C-a\C-xo\M->\C-y\C-m\C-xo")
(global-set-key "\C-xp" 'push-line-other-window )
#+end_src

*** Footnotes
#+begin_src emacs-lisp
(setq org-footnote-auto-label 'plain)
#+end_src

*** Agenda
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
         "TODO(t!@/!@)"
         "FIXME(f!@/!@)"
         "QUESTION(q!@/!@)"
         "STARTED(s!@/!@)"
         "WAIT(w!@/!@)"
         "|"
         "DONE(d!@/!@)"
         "POSTPONED(p!@/!@)"
         "ANSWERED(a!@/!@)"
         "CANCELLED(c!@/!@)"
         "DUPLICATE(u!@/!@)")))
(setq org-enforce-todo-dependencies t)
(setq org-enforce-todo-checkbox-dependencies t)

(setq org-agenda-files
      (case dan/operating-system
        ('darwin '("~/Work" "~/org"))
        ('linux '("~/org"))))
(setq org-agenda-start-on-weekday nil)
(setq org-agenda-ndays 30)
(setq org-agenda-compact-blocks t)
(setq org-deadline-warning-days 7)
(set-face-foreground 'org-agenda-date-weekend "blue")

(setq org-agenda-custom-commands
      `(("Q" "Search for items in state" todo "QUESTION")
        ("W" "Search for work items in state" todo "TODO"
         ((org-agenda-files '("~/org/work.org"
                              "~/org/wtccc2.org"
                              "~/org/pobi.org"
                              "~/org/shellfish.org"))))
        ("T" "Search for tasks items in state" todo "TODO"
         ((org-agenda-files '("~/org/tasks.org"))))
        ("C" "Search for computing items in state" todo "TODO"
         ((org-agenda-files '("~/org/computing.org"))))))

(defun org-agenda-format-date-aligned-dan (date)
  "Dan's modified version of `org-agenda-format-date-aligned'.

  Format a date string for display in the daily/weekly agenda, or
  timeline.  This function makes sure that dates are aligned for
  easy reading.
  "
  (require 'cal-iso)
  (let* ((dayname (calendar-day-name date))
         (day (cadr date))
         (day-of-week (calendar-day-of-week date))
         (month (car date))
         (monthname (calendar-month-name month))
         (year (nth 2 date))
         (iso-week (org-days-to-iso-week
                    (calendar-absolute-from-gregorian date)))
         (weekyear (cond ((and (= month 1) (>= iso-week 52))
                          (1- year))
                         ((and (= month 12) (<= iso-week 1))
                          (1+ year))
                         (t year)))
         (weekstring (if (= day-of-week 1)
                         (format " W%02d" iso-week)
                       "")))
  ;;;     (format "%-10s %2d %s %4d%s"
  ;;;         dayname day monthname year weekstring)

    (format "%s %2d %s"
            (substring dayname 0 3) day (substring monthname 0 3))))

(setq org-agenda-format-date 'org-agenda-format-date-aligned-dan)
#+end_src

*** Export
**** General
#+begin_src emacs-lisp
(require 'org-html)
(setq org-export-htmlize-output-type (if t 'inline-css 'css))
(unless (member "svg" org-export-html-inline-image-extensions)
  (setq org-export-html-inline-image-extensions
        (cons "svg" org-export-html-inline-image-extensions)))

(setq org-export-with-LaTeX-fragments t)
(setq org-export-copy-to-kill-ring nil)
(setq org-export-allow-BIND t)

;; from Eric
(setq org-export-html-style
      "<style type=\"text/css\">
pre {
    border: 1pt solid #AEBDCC;
    background-color: #232323;
    color: #E6E1DC;
    padding: 5pt;
    font-family: courier, monospace;
    font-size: 90%;
    overflow:auto;
}
</style>")

;; (setq org-export-html-style
;; "<style type=\"text/css\">
;; pre {
;;     border: 1pt solid #AEBDCC;
;;     padding: 5pt;
;;     font-family: courier, monospace;
;;     font-size: 90%;
;;     overflow:auto;
;; }
;; </style>")
#+end_src
**** Latex
***** General
To use xelatex:
rubber -f -m xelatex somefile.tex
#+begin_src emacs-lisp
(setq org-latex-to-pdf-process '("rubber -fd --into %o %f"))
#+end_src
***** Latex export hook
      [[mairix:t:@@87iq7fy0q0.fsf@totally-fudged-out-message-id][Email from Dan Davison: Re: {Orgmode} export-latex-fin]]
#+begin_src emacs-lisp :tangle no
(defun  dan/push-latex-to-odt ()
  "Convert exported .text to .odt and open in openoffice."
  (let* ((file-name (file-name-sans-extension (buffer-name)))
         (output-buffer "*latex-to-odt output*")
         (cmd (format  "mk4ht oolatex %s.tex && ooffice %s.odt"
                       file-name file-name)))
    (message "Converting latex to odt")
    (start-process-shell-command
     "latex-to-odt" output-buffer cmd)))

(defun  dan/compile-latex ()
  "Convert exported .text to dvi"
  (let* ((file-name (file-name-sans-extension (buffer-name)))
         (output-buffer "*latex-to-dvi output*")
         (cmd (format  "latex %s.tex"
                       file-name file-name)))
    (message cmd)
    (start-process-shell-command
     "latex" output-buffer cmd)))

(add-hook 'org-export-latex-after-save-hook
          'dan/compile-latex)
#+end_src

***** Listings
***** Minted
      :PROPERTIES:
      :tangle: no
      :END:

#+begin_src emacs-lisp :exports code
(require 'org-latex)
(setq org-export-latex-listings-w-names nil)
(setq org-export-latex-packages-alist
      '(("AUTO" "inputenc" t)))
(add-to-list 'org-export-latex-classes
          '("org-article"
             "\\documentclass{org-article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-export-latex-listings 'minted)
(add-to-list 'org-export-latex-packages-alist '("" "minted"))
(setq org-latex-to-pdf-process
      (mapcar
       (lambda
         (dummy)
         ;; "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "pdflatex -interaction nonstopmode -output-directory %o %f"
         )
       '(1 2 3)))
(add-to-list 'org-export-latex-minted-langs '(R "r"))
(add-to-list 'org-export-latex-minted-langs '(octave "matlab"))
(add-to-list 'org-export-latex-minted-langs '(sqlite "sqlite3"))
#+end_src
**** HTML
*** Src
**** General
#+begin_src emacs-lisp
(defun dan/org-src-mode-hook ()
  (save-excursion
    (outline-minor-mode -1)))
;; why this python indent stuff?
;; (if (eq major-mode 'python-mode)
;;     (setq python-indent 4)))

(add-hook 'org-src-mode-hook 'dan/org-src-mode-hook)

(add-hook 'org-src-mode-hook
          ;; Note this is a poor choice of key for an org-src buffer
          ;; displaying an Org block
          (lambda () (define-key org-src-mode-map "\C-c\C-v"
                       'org-src-do-key-sequence-at-code-block)))
(defun dan/org-fill-paragraph-no-op-in-code-block ()
  (interactive)
  (if (org-babel-where-is-src-block-head)
      (message "In code block: doing nothing")
    (call-interactively 'fill-paragraph)))

(defun dan/org-babel-edit-src-code (&optional arg)
  (interactive "P")
  (if arg
      (org-babel-do-in-edit-buffer
       (org-edit-src-exit))
    (call-interactively 'org-edit-src-code)))

(setq org-src-window-setup 'current-window) ;; 'current-window 'other-window 'other-frame 'reorganize-frame

(setq org-src-ask-before-returning-to-edit-buffer nil)

(setq org-edit-src-content-indentation 0)

(setq org-edit-src-persistent-message nil)
#+end_src

**** Native commands
#+begin_src emacs-lisp
(defcustom org-src-native-commands '()
  "List of org-src native commands.

These are commands that, when issued in a src block, should be
performed 'natively', i.e. their effect should be as if they were
issued in a language major-mode buffer."
  :group 'org-babel
  :type '(set :greedy t
              (const tab)
              (const underscore)
              (const comment-dwim)
              (const indent-region)
              (const fill-paragraph)))

(setq org-src-native-commands
      '(tab underscore comment-dwim indent-region fill-paragraph))

(setq org-src-tab-acts-natively t)

(defun org-src-native/underscore ()
  (interactive)
  (or (and (memq 'underscore org-src-native-commands)
           (org-babel-do-key-sequence-in-edit-buffer "_"))
      (org-self-insert-command 1)))

(defun org-src-native/comment-dwim (&optional arg)
  (interactive "P")
  (or (and (memq 'comment-dwim org-src-native-commands)
           (org-babel-do-key-sequence-in-edit-buffer "\M-;"))
      (comment-dwim arg)))

(defun org-src-native/indent-region ()
  (interactive)
  (or (and (memq 'indent-region org-src-native-commands)
           (org-babel-do-key-sequence-in-edit-buffer "\C-\M-\\"))
      (indent-region)))

(defun org-src-native/fill-paragraph ()
  (interactive)
  (or (and (memq 'fill-paragraph org-src-native-commands)
           (org-babel-do-key-sequence-in-edit-buffer "\M-q"))
      (call-interactively 'fill-paragraph)))
#+end_src
**** Library of Babel
#+begin_src emacs-lisp
(org-babel-lob-ingest "~/org-mode/contrib/babel/library-of-babel.org")
#+end_src
**** Sessions
#+begin_src emacs-lisp
(setq org-babel-detect-errors-in-sessions t)
#+end_src

**** Hide block and switch to edit buffer
#+begin_src emacs-lisp
(defun dan/org-hide-block-and-switch-to-code-buffer ()
  (interactive "P")
  (let* ((beg (org-babel-where-is-src-block-head))
         (org-src-window-setup 'reorganize-frame))
    (when beg
      (goto-char beg)
      (org-hide-block-toggle 'hide)
      (org-edit-src-code))))
#+end_src
**** Activate languages
#+begin_src emacs-lisp
(setq org-babel-load-languages
      (mapcar (lambda (lang) (cons lang t))
              (dan/org-babel-list-supported-languages)))

(org-babel-do-load-languages
 'org-babel-load-languages org-babel-load-languages)

(setq swank-clojure-binary "/usr/bin/clojure")
(setq org-babel-js-cmd "node")
(setenv "NODE_DISABLE_COLORS" "1")

(add-to-list 'org-src-lang-modes '("C" . c))
(add-to-list 'org-src-lang-modes '("dot" . something-else))

(setq org-src-lang-modes
      (append '(("dot" . graphviz-dot))
              (delq (assoc "dot" org-src-lang-modes)
                    org-src-lang-modes)))
#+end_src
**** Variables
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-babel-min-lines-for-block-output 10)
(setq org-export-babel-evaluate t)
(setq org-babel-noweb-error-langs
      (mapcar #'symbol-name (dan/org-babel-list-supported-languages)))
#+end_src
**** Etc
***** dan/org-edit-src-code-current-window
#+begin_src emacs-lisp
(defun dan/org-edit-src-code:current-window ()
  (interactive)
  (let ((org-src-window-setup 'current-window))
    (org-edit-src-code)))

(defun dan/org-edit-src-code:reorganize-frame ()
  (interactive)
  (let ((org-src-window-setup 'reorganize-frame))
    (org-edit-src-code)))
#+end_src

***** Edit buffer instead of block unhiding
#+begin_src emacs-lisp
(defun org-babel-edit-special-maybe ()
  "Switch to edit buffer for block at point"
  (interactive)
  (let ((case-fold-search t)
        (org-src-window-setup 'current-window))
    (if (save-excursion
          (beginning-of-line 1)
          (looking-at org-babel-src-block-regexp))
        (progn (org-edit-special)
               t) ;; to signal that we took action
      nil))) ;; to signal that we did not

;; (add-hook 'org-tab-first-hook 'org-babel-edit-special-maybe)
#+end_src
***** R -> org
#+begin_src emacs-lisp :tangle no
(defun dan/wrap-R-functions-in-source-blocks ()
  (interactive)
  (R-mode)
  (save-excursion
    (while (re-search-forward "\\([\.[:alnum:]]+\\)[ \t]+<-[ \t]+function" nil t)
      (goto-char (match-beginning 0))
      (insert (format "* %s\n" (match-string 1)))
      (insert "#+begin_src R\n")
      (ess-end-of-function)
      (insert "\n#+end_src\n")))
  (org-mode))
#+end_src

***** reset test table macro

   # 2*C-k <up> C-y <up> M-x r e - s e a r <tab> b a c <tab> RET T B L N A M
   # E RET <down> C-a C-SPC M-x r e - s e r DEL a r c h <tab> f o <tab> RET
   # T B L F M RET C-a M-x r e - r e p <tab> 4*DEL p l <tab> i n <tab>
   # 3*M-DEL <tab> r e <tab> g <tab> RET \ [ \ ] 2*RET M-x 2*<up> RET T B L
   # F M RET C-a 2*C-k <down> C-y <up>

#+begin_src emacs-lisp
(fset 'reset-tests
      (lambda (&optional arg) "Keyboard
   macro." (interactive "p") (kmacro-exec-ring-item (quote ([11
                                                             11 up 25 up 134217848 114 101 45 115 101 97 114 tab 98 97 99
                                                             tab return 84 66 76 78 65 77 69 return down 1 67108896
                                                             134217848 114 101 45 115 101 114 backspace 97 114 99 104 tab
                                                             102 111 tab return 84 66 76 70 77 return 1 134217848 114 101
                                                             45 114 101 112 tab backspace backspace backspace backspace 112
                                                             108 tab 105 110 tab M-backspace M-backspace M-backspace tab
                                                             114 101 tab 103 tab return 92 91 92 93 return return 134217848
                                                             up up return 84 66 76 70 77 return 1 11 11 down 25 up]
                                                            0 "%d")) arg)))
#+end_src

*** Fireforg
#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path "/usr/local/src/org-etc/org-fireforg/lisp")
(require 'org-fireforg)
(org-fireforg-registry-insinuate)
#+end_src

*** Inline images
#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

*** Contrib
**** Load path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/org-mode/contrib/lisp")
#+end_src
**** Htmlize
#+begin_src emacs-lisp
(dan/require 'htmlize)
#+end_src

**** Org-mime
#+begin_src emacs-lisp
(when (dan/require 'org-mime)

  (add-hook 'message-mode-hook
            (lambda ()
              (local-set-key "\C-c\M-o" 'org-mime-htmlize)))

  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize))))
#+end_src
*** External
**** Org-fold
#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path "~/lib/emacs/org-fold")
(dan/require 'org-fold)
#+end_src
**** Org-icons
#+begin_src emacs-lisp :tangle no
(when (dan/require 'org-icons)
  (org-icons-mode))
#+end_src

**** Org-fstree
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/org-fstree")
#+end_src

*** Contacts
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/org-contacts")
(require 'org-contacts)
(setq org-contacts-files '("/Users/davison/config/email/contacts.org"))
(setq org-contacts-completion-ignore-case t)
#+end_src

** Org-buffers
   :PROPERTIES:
   :tangle: no
   :END:

#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/org-buffers")
(when (dan/require 'org-buffers)
  (defun dan/set-org-buffers-visibility ()
    (if (org-buffers-state-eq :atom 'heading)
        (org-overview)))
  ;; (add-hook 'org-buffers-mode-hook 'dan/set-org-buffers-visibility)
  ;; (setq special-display-buffer-names `(,org-buffers-buffer-name))
  )
 #+end_src

** Session
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/session/lisp")
(require 'session)
(session-initialize)
#+end_src
** Smex
#+begin_src emacs-lisp
(add-to-list 'load-path "~/lib/emacs/smex")
(when (dan/require 'smex)
  (smex-initialize)
  ;;(global-set-key (kbd "M-x") 'smex)
  ;; (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  ;; (global-set-key (kbd "C-c C-x M-x") 'execute-extended-command)
  )
#+end_src

** Multiple major modes
   :PROPERTIES:
   :tangle: no
   :END:

*** Mumamo
#+begin_src emacs-lisp :tangle no
(load "~/lib/emacs/nxhtml/autostart.el")
(setq mumamo-background-colors nil)
(when (dan/require 'mumamo)
  (add-hook 'org-mumamo-mode-hook (lambda () (mumamo-no-chunk-coloring +1))))
#+end_src
*** Multi-mode
I didn't get this to work.
#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path "~/lib/emacs/multi-mode")
(when (dan/require 'multi-mode)

  (defun org-src-get-block-info-for-multi-mode (pos)
    (save-excursion
      (goto-char pos)
      (let ((info (org-edit-src-find-region-and-lang)))
        (list (org-src-get-lang-mode (nth 2 info))
              (nth 0 info) (nth 1 info)))))

  (defun org-src-turn-on-multi-mode ()
    (setq multi-chunk-fns
          (list org-src-get-block-info-for-multi-mode))))
#+end_src

*** Two-mode mode
#+begin_src emacs-lisp :tangle no
(setq default-mode (list "org-mode" 'org-mode))
(setq second-modes '(("python" "#+begin_src python" "#+end_src" python-mode)
                     ("emacs-lisp" "#+begin_src emacs-lisp" "#+end_src" emacs-lisp-mode)
                     ("ess" "#+begin_src R" "#+end_src" ess-mode)
                     ))
#+end_src

*** Org-noweb
#+begin_src emacs-lisp :tangle no
(when (dan/require 'noweb-mode)
  (setq noweb-default-code-mode 'fundamental-mode)
  (setq noweb-default-doc-mode 'org-mode)

  (setq noweb-code-mode noweb-default-code-mode))
#+end_src
** Uniquify
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+end_src

* Key bindings
** global
#+begin_src emacs-lisp
(dan/register-key-bindings
 '(global-map .
              (("\C-b" . backward-sexp)
               ("\C-f" . forward-sexp)
               ("\C-r" . isearch-backward-regexp)
               ("\C-s" . isearch-forward-regexp)
               ("\C-\\" . indent-region)
               ([67108910] . delete-other-windows) ;; C-.
               ("\C-x\C-b" . org-buffers-list)
               ("\C-x\C-f" . dan/find-file)
               ("\C-x\M-f" . find-file-at-point)
               ("\C-xd" . dan/dired-no-ask)
               ("\C-ca" . org-agenda)
               ("\C-cb" . org-iswitchb)
               ("\C-cy" . yas/expand)
               ("\C-n" . dan/next-line-and-indent)
               ("\C-p" . dan/previous-line-and-indent)
               ("\C-ca" . org-agenda)
               ("\C-c\C-a" . show-all)
               ("\C-ce" . show-all)
               ("\C-cf" . dan/find-function-or-library)
               ("\C-c\M-f" . rgrep)
               ("\C-cg" . dan/magit-status)
               ("\C-ck" . bury-buffer)
               ("\C-ci" . dan/eol-column-line)
               ("\C-cl" . org-store-link)
               ("\C-cm" . dan/switch-to-minibuffer)
               ("\C-cn" . dan/show-buffer-file-name)
               ("\C-co" . dan/scratch-buffer)
               ("\C-cp" . paredit-mode)
               ("\C-cr" . replace-regexp)
               ("\C-cs" . search-forward-symbol-at-point)
               ("\C-cv" . dan/show-variable)
               ("\C-cw" . delete-window)
               ("\C-c)" . blink-matching-open)
               ("\C-c," . flymake-display-err-menu-for-current-line)
               ("\C-c\C-z" . (lambda () (switch-to-buffer "*Python*")))
               ("\C-\M-g" . lgrep)
               ("\C-x\C-c" . kill-emacs)  ;; If it's not saved already that's your fault
               ([(control next)] . end-of-buffer)
               ([(control prior)] . beginning-of-buffer)
               ([(s tab)] . lisp-complete-symbol)
               ([(shift tab)] . org-cycle)
               ([(meta tab)] . pcomplete)
               ("\M-(" . dan/enclose-rest-of-line-in-parentheses)
               ("\M-n" . forward-paragraph)
               ("\M-p" . backward-paragraph)
               ("\M-o" . dan/occur)
               ("\M-s\M-o" . dan/google)
               ("\M-2" . dan/insert-double-quotes)
               ([delete] . winner-undo)
               ([(hyper left)] . winner-undo)
               ([(hyper right)] . winner-redo)
               ([(control left)] . winner-undo)
               ([(control right)] . winner-redo)
               ([(super left)] . winner-undo)
               ([(super right)] . winner-redo)
               ([(super return)] . dan/toggle-fullscreen)
               ([f1] . bury-buffer)
               ([f2] . (lambda () (interactive) (switch-to-buffer "*Group*")))
               ([f3] . (lambda () (interactive) (switch-to-buffer "*Org Agenda*")))
               ([f4] . (lambda () (interactive) (find-file "~/Notes/notes.org")))
               ([f5] . (lambda () (interactive) (switch-to-buffer "*Python*")))
               ([f6] . dan/find-file-emacs-config)
               ([f7] . dan/org-schedule-task-with-link)
               ([f8] . org-remember)
               ([f9] . find-tag-at-point)
               ([f10] . delete-other-windows)
               ([(control escape)] . delete-window)
               ([(meta escape)] . delete-other-windows)
               ([escape] . dan/other-non-minibuffer-window))))

(add-hook 'after-change-major-mode-hook
          (lambda ()
            (local-set-key [delete] 'winner-undo)
            (local-set-key [(super left)] 'winner-undo)
            (local-set-key [(super right)] 'winner-redo)))
#+end_src
** C
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("c" . nil))
#+end_src
** Ctrl-x-4
#+begin_src emacs-lisp
(dan/register-key-bindings
 '(ctl-x-4-map .
               (("t" . toggle-window-split)
                ("s" . dan/switch-windows))))
#+end_src
** Coffee
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("coffee" .
   (("\C-c\C-l" . coffee-compile-file)
    ("\C-c\C-r" . coffee-compile-region)
    ("\C-c\C-c" . dan/coffee-execute)
    ("\C-cd" . dan/coffee-insert-debugger)
    ("\C-cl" . dan/coffee-insert-console-log)
    ([(return)] . newline)
    ("\C-j" . newline-and-indent))))
#+end_src

** Dired
#+begin_src emacs-lisp
(require 'dired)
(dan/register-key-bindings
 '("dired" .
   (([(left)] . dired-up-directory)
    ([(right)] . dired-find-file))))
#+end_src

** Elisp
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("emacs-lisp" .
   (("\C-cd" . edebug-defun)
    ("\C-c\C-l" . dan/eval-buffer-confirm)
    ("\M-so" . occur)
    ([tab] . dan/indent-or-complete)
    ([(control left)] . winner-undo)
    ([(control right)] . winner-redo))))
#+end_src
** ESS
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("ess" .
   (("\C-c?" . ess-display-help-on-object)
    ("\C-ca" . ess-r-args-show)
    ("\C-cd" . dan/ess-list-R-function-definitions)
    ("\C-ck" . dan/ess-kill-line-and-indent)
    ("\C-cx" . dan/ess-recover-R-process)
    ([(control return)] . ess-eval-line-and-step)
    ([(shift tab)] . ess-complete-object-name))))

(dan/register-key-bindings
 `("inferior-ess" .
   ,(cdr (assoc "ess" dan/key-bindings))))
#+end_src
** Gnus
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("gnus-summary" .
   (("\C-d" . dan/gnus-summary-delete-article)
    ("\C-ct" . dan/gnus-summary-tick-thread))))

(require 'gnus-topic) ;; in order that mode-map exists

(dan/register-key-bindings
 '("gnus-topic" .
   (([tab] . gnus-topic-select-group)
    ([(meta right)] . gnus-topic-indent)
    ([(meta left)] . gnus-topic-unindent))))



(dan/register-key-bindings
 '("gnus-article" .
   (("\C-n" . dan/gnus-article-goto-next-article))))
#+end_src
** Latex
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("latex" .
   (([C-tab] . TeX-complete-symbol))))
#+end_src
** Mml
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("mml" .
   (("\M-q" . ded/mml-fill-paragraph))))
#+end_src
** Org
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("org" .
   (("\C-ch" . dan/hide-subtree)
    ("\C-c\M-i" . org-table-insert-column)
    ("\C-c\M-d" . org-table-delete-column)
    ("\C-cp" . org-insert-property-drawer)
    ("\C-ct" . org-hide-block-toggle)
    ("\C-cu" . (lambda () (interactive) (org-back-to-heading)))
    ("_" . org-src-native/underscore)
    ("\M-q" . org-src-native/fill-paragraph)
    ("\M-;" . org-src-native/comment-dwim)
    ("\C-\\" . org-src-native/indent-region)
    ([(control \')] . dan/org-hide-block-and-switch-to-code-buffer))))
#+end_src

*** Eric's outline navigation bindings
	[[mairix:t:@@m2eirnzhb4.fsf@gmail.com][Email from Eric Schulte: Re: {Orgmode} Go to top node]]
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key (kbd "\M-\C-n") 'outline-next-visible-heading)
            (local-set-key (kbd "\M-\C-p") 'outline-previous-visible-heading)
            (local-set-key (kbd "\M-\C-u") 'outline-up-heading)))
#+end_src

** Org Src
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("org-src" .
   (([(control \')] . org-edit-src-exit)
    ([delete] . org-edit-src-exit))))
#+end_src
** Paredit
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("paredit" .
   (([(control left)] . winner-undo)
    ([(control right)] . winner-redo))))
#+end_src

** Python
*** inferior python
#+begin_src emacs-lisp :tangle no
(dan/register-key-bindings
 '("inferior-python" .
   ()))
#+end_src
*** python
#+begin_src emacs-lisp :tangle yes
(dan/register-key-bindings
 '("python" .
   (("\C-c\C-z" . python-shell-switch-to-shell)
    ("\C-cd" . dan/insert-ipdb-set-trace)
    ("\M-." . dan/rope-goto-definition)
    ([tab] . python-shell-completion-complete-or-indent))))
#+end_src

*** python-mode.el
#+srcname: python-mode-bindings
#+begin_src emacs-lisp :tangle no
(dan/register-key-bindings
 '("py" .
   (([(control return)] . dan/py-eval-line)
    ("\C-c\C-f" . dan/ffap-python-import)
    ("\C-c\C-z" . py-shell)
    ("\C-cd" . dan/insert-ipdb-set-trace))))
#+end_src
** Texinfo
#+begin_src emacs-lisp
(dan/register-key-bindings
 '("texinfo" .
   (("\C-c\C-s" . dan/texinfo-show-structure))))

(defun dan/texinfo-show-structure (&optional nodes-too)
  (interactive)
  (texinfo-show-structure)
  (let ((buffer-read-only nil))
    (goto-char (point-min))
    (if (re-search-forward "^ +[0-9]+:" nil t)
        (delete-region (point-min) (point-at-bol)))))
#+end_src
* Appearance
#+begin_src emacs-lisp
(add-hook 'find-file-hook 'dan/sanitise-faces)
(add-hook 'find-file-hook 'dan/set-show-paren-style)
(setq mouse-highlight nil)
#+end_src
** Vanilla
#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(if (featurep 'scroll-bar)
    (scroll-bar-mode -1))
(setq inhibit-startup-message t)
#+end_src
** Save faces
#+begin_src emacs-lisp :tangle no
(defun dan/save-faces (&optional restore-p)
  (interactive "P")
  (let ((faces (face-list)) orig)
    (dolist (face (face-list))
      (unless (string-match "__original$" (symbol-name face))
        (setq orig (intern (concat (symbol-name face) "__original")))
        (if restore-p
            (condition-case nil
                (copy-face orig face)
              (error "Failed to restore face %s from %s" face orig))
          (condition-case nil
              (copy-face face orig)
            (error "Failed to save face %s as %s" face orig)))))))

(dan/save-faces)

(setq color-theme-is-cumulative t)
#+end_src
** Start-up
#+begin_src emacs-lisp
(color-theme-initialize)
;; (color-theme-charcoal-black)
;; (color-theme-emacs-21) ;; hack to avoid square in bottom right on fullscreen
;; (color-theme-charcoal-black)
(case dan/operating-system
  ('linux
   (set-face-attribute 'default nil :height 110 :family "DejaVu Sans Mono"))
  ('darwin
   (set-face-attribute 'default nil :height 135)))
;; :weight 'bold :family 'default :foundry 'default :font 'unspecified
(dan/sanitise-faces)
(dan/set-show-paren-style)
(nconc default-frame-alist '((cursor-type . bar)))
;; (set-face-attribute 'org-block-begin-line nil :box nil :overline nil)
;; (set-face-attribute 'org-block-end-line nil :box nil :underline nil)
#+end_src

** Transparency
http://www.emacswiki.org/emacs/TransparentEmacs
#+begin_src emacs-lisp
;; (set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))

(setq dan/frame-transparent-alpha '(95 50)) ;; high -> opaque

(when nil
  (set-frame-parameter (selected-frame) 'alpha dan/frame-transparent-aalpha)
  (add-to-list 'default-frame-alist (cons 'alpha dan/frame-transparent-alpha)))

(eval-when-compile (require 'cl))
(defun dan/toggle-transparency ()
  (interactive)
  (if (/=
       (cadr (find 'alpha (frame-parameters nil) :key #'car))
       100)
      (set-frame-parameter nil 'alpha '(100 100))
    (set-frame-parameter nil 'alpha dan/frame-transparent-alpha)))
#+end_src

** Face hacks
#+begin_src emacs-lisp :tangle no
(set-face-attribute 'default-bold nil :weight "normal")
#+end_src

* Start-up
#+begin_src emacs-lisp
;;(when (string-match "^23\.*" emacs-version)
;; temp hack to make w3m work with emacs23
;; (require 'w3m-e21)
;; (provide 'w3m-e23))

;; (org-fireforg-registry-initialize t)

(if (eq dan/operating-system 'linux)
    (nnmairix-update-database))
(dan/set-key-bindings)
(if nil
    (org-agenda-list)
  (delete-other-windows))
(require 'server)
(unless (server-running-p) (server-start))
(ido-mode +1)
(setq ido-separator " ")
(eshell)
;; (when
;;            (fboundp 'ns-toggle-fullscreen))
;;   (ns-toggle-fullscreen))
#+end_src

* Experimental
#+begin_src emacs-lisp
(setq scroll-preserve-screen-position :always
      scroll-conservatively           most-positive-fixnum
      scroll-step                     0)

(setq x-select-enable-primary t)
#+end_src

** Redefine message
#+begin_src emacs-lisp :tangle no
(defun message (format-string &rest args)
  "Redfine message to write to *Messages* buffer only"
  (set-buffer "*Messages*")
  (goto-char (point-max))
  (insert (apply 'format format-string args)))
#+end_src
* Not used
:PROPERTIES:
:tangle: no
:END:
** Customize stuff
#+begin_src emacs-lisp :tangle no
;; (custom-set-variables
;;   ;; custom-set-variables was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  '(safe-local-variable-values (quote ((org-export-latex-image-default-option . "width=30em") (org-export-latex-image-default-option . "width=100em") (org-babel-default-header-args (:tangle . "wtccc2-pca.py")) (org-babel-default-header-args (:tangle . "wtccc2-pca.py") (:exports . "code")) (org-babel-default-header-args (:results . "replace output") (:session . "*R - jsmr*") (:exports . "none")) (org-babel-default-header-args (:results . "replace output") (:session . "*R: wtccc2*") (:exports . "none")) (noweb-default-code-mode . R-mode) (org-src-preserve-indentation . t) (org-edit-src-content;; -indentation . 0) (outline-minor-mode)))))
;; (custom-set-faces
;;   ;; custom-set-faces was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  '(default ((t (:inherit nil :stipple nil
;;                          :background "Grey15" :foreground "Grey"
;;                          :inverse-video nil :box nil
;;                          :strike-through nil :overline nil :underline nil :slant normal
;;                          :weight normal :height 120 :width normal
;;                          :foundry "unknown" :family "DejaVu Sans Mono"))))
;;  '(gnus-cite-1 ((((class color) (background light)) (:foreground "deep sky blue")))))
#+end_src

* File config
#+babel: :results silent :tangle yes
