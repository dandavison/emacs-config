;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Dan's emacs customisation file 
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ~/.emacs contains code to 
;; (a) byte compile this file if the text version is newer than the byte-compiled version
;; (b) load the byte-compiled version of this file
;; the above was a plan at some point; not doing it currently

;; acceptable color-themes
;; (robin-hood gray30 kingsajz)

(load "~/src/config/emacs/vanilla")
(load "org-dan")
(load "outline-dan")
(load "ess-dan")
(load "latex-dan")

(add-to-list 'load-path "/usr/local/src/elisp-library")

(require 'htmlize) ;; attempt to overcome Invalid face error on export to HTML
(require 'regex-tool)
(require 'unbound)
(require 'zenburn)
(require 'windresize)
(require 'xclip)
(require 'highlight-parentheses)
(highlight-parentheses-mode)
(add-to-list 'load-path "/usr/local/src/elisp-library/magit")
(require 'magit)
;; (require 'bbdb)
;; (bbdb-initialize)

;; (require 'ido)

;; (add-to-list 'load-path "/usr/local/src/elisp-library/yasnippet")
;; (require 'yasnippet)

(add-to-list 'load-path "/usr/local/src/elisp-library/yasnippet-bundle")
(require 'yasnippet-bundle)

;; Things that I'm not really interested in seeing in emacs
;; (you can still open them explicitly)
(setq dan-ignored-extensions
      '(".html" ".csv" ".ps" ".bst" ".cls" ".sty" ".backup" ".log"
	".fdf" ".spl" ".aux" ".ppt" ".doc" ".xls" ".mp3"))

(mapc (lambda(extension)
	(add-to-list 'completion-ignored-extensions extension))
	dan-ignored-extensions)

(ido-mode t) ;; (iswitchb-mode t)
(setq ido-separator " ")

;; As regexps, these should really have terminal $
(mapc (lambda(extension)
	(add-to-list 'ido-ignore-buffers (regexp-quote extension))
	(add-to-list 'ido-ignore-files (regexp-quote extension)))
      dan-ignored-extensions) 

(add-to-list 'ido-ignore-buffers "\\*") ;; if you want *scratch* or *R* just type it
;; (add-to-list 'ido-ignore-files "^[^.]+$") ;; files must have a . in their name (experimental)


(require 'recentf)
(load "R-anything-config")

;; (add-to-list 'load-path "/usr/local/src/elisp-library/icicles")
;; (load "icicles/icicles")
;; (Icy-mode t)

(recentf-mode t)
(show-paren-mode t)
(winner-mode t)
(global-font-lock-mode t)
;; (desktop-save-mode t)



(load "~/src/config/emacs/keys-dan")
;; I've moved the custom-set-faces call into vanilla.el; don't know how to set the faces otherwise

(defun dan-set-keys ()
  (interactive)
  (mapc (lambda(pair) (global-set-key (car pair) (cdr pair)))
	dan-global-keybindings))

(dan-set-keys)

;; (setq custom-file "~/src/config/emacs/emacs.el") ;; now code generated by emacs' customisation buffers will go in this file rather than ~/.emacs

;; Kevin Rodgers help-gnu-emacs
;; eldoc/timer can be used somehow to control how long messages appear for
;; (add-hook 'post-command-hook 'eldoc-schedule-timer nil t)
;; (add-hook 'pre-command-hook 'eldoc-pre-command-refresh-echo-area t)
;; (setq eldoc-timer [nil 1000000 0 500000 t eldoc-print-current-symbol-info nil t]) ;;


(fset 'yes-or-no-p 'y-or-n-p) ;; http://www.xsteve.at/prg/emacs/.emacs.txt -- replace y-e-s by y
(put 'narrow-to-region 'disabled nil)

;; put back-up files in a single (invisible) directory in the original file's directory
(setq backup-directory-alist '(("." . ".emacs-backups")))
;; put back-up files in a single (invisible) directory in home directory -- doesn't work
;; (setq backup-directory-alist '(("~/.emacs-backups"))) 

;; http://flash.metawaredesign.co.uk/2/.emacs
(if window-system
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "firefox"))
;; (setq browse-url-browser-function 'browse-url-firefox)
;; (setq browse-url-browser-function 'w3m-browse-url)
(setq browse-url-firefox-new-window-is-tab t)



(setq case-fold-search nil)
(setq comint-input-ring-size 1024)
(setq default-major-mode 'org-mode)
(setq diff-switches "-u")
(setq frame-title-format "emacs:%b") ;;      (concat  "%b - emacs@" (system-name)))
(setq kill-read-only-ok t)
(setq initial-scratch-message nil)
(setq minibuffer-message-timeout 0.5)
(setq nuke-trailing-whitespace-p t)
(setq parens-require-spaces nil)
(setq require-final-newline 'visit-save)
(setq tags-file-name "~/src/.tags")
(setq x-alt-keysym 'meta)
;; (visit-tags-table tags-file-name)
;; (setq font-lock-always-fontify-immediately t) where did I get that from?

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

; (add-hook 'local-write-file-hooks (lambda () (nuke-trailing-whitespace))))


(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

  
(defun byte-compile-dir (dir)
  (interactive)
  (let ((files (directory-files dir t ".*\.el" t)) file)
    (while (setq file (pop files))
      (byte-compile-file file))))


(defun budget-eval ()
  ;; to eval yanked text in python-shell -- doesn't work
  (interactive)
  (other-buffer)
  (yank)
  (newline))

;; (defun dan-xclip-kill ()
;;   "kill region and place on X clipboard"
;;   (interactive)
;;   (shell-command-on-region (mark) (point) "xclip")
;;   (delete-region (mark) (point))) ;; don't add to kill ring

;; (defun dan-xclip-yank ()
;;   "yank from X clipboard and insert at point"
;;   (interactive)
;;   (shell-command "xclip -o" t))

(defun paste-mode ()
  (interactive)
  (mapc (lambda (pair) (local-set-key (car pair) (cdr pair)))
	dan-paste-mode-keybindings))

(defun dan-next-line-and-indent ()
  (interactive)
  (next-line)
  (indent-according-to-mode))

(defun dan-previous-line-and-indent ()
  (interactive)
  (previous-line)
  (indent-according-to-mode))

(defun dan-insert-square-brackets ()
  (interactive)
  (insert "[]")
  (backward-char))

(defun dan-insert-curly-brackets ()
  (interactive)
  (insert "{}")
  (backward-char))

(defun dan-enclose-sexp-in-parentheses ()
  (interactive)
  (insert "(")
  (forward-sexp)
  (insert ")"))

(defun dan-enclose-rest-of-line-in-parentheses ()
  (interactive)
  (insert "(")
  (end-of-line) ;; need to account for comment on same line
  (insert ")"))

(defun dan-insert-- ()
  (interactive)
  (insert "-"))

(defun dan-quote-word ()
  "Surround word at point with double quotes"
  (interactive)
  (re-search-backward "[ ,(\t]" nil t)
  (forward-char) (insert "\"")
  (re-search-forward "[ ,)\t]" nil t)
  (backward-char) (insert "\""))

(defun dan-emacs-lisp-mode-hook ()
  "Dan's settings for emacs-lisp mode"
  ;; (set 'lisp-indent-offset 4)
  (local-set-key "\C-c\C-l" 'dan-eval-buffer-confirm))

(add-hook 'emacs-lisp-mode-hook 'dan-emacs-lisp-mode-hook)


(defun dan-compile-and-switch-to-iESS ()
  (interactive)
  (when (compile "make -k")
    (ess-switch-to-end-of-ESS)))

;;  (when (shell-command "make -k")

;; Dan Feb 2006: See http://www.xemacs.org/Links/tutorials_1.html
(defun dan-c-c++-mode-hook ()
  "Dan's local settings for c-mode and c++-mode"
  ;; add font-lock to function calls (but also gets if() and while() etc)
  ;; (font-lock-add-keywords
  ;; ? ?nil `(("\\([[:alpha:]_][[:alnum:]_]*\\)(" ?1 font-lock-function-name-face)))
  (setq c-basic-offset 4)
  (setq line-number-mode t)
  (mapc (lambda (pair) (local-set-key (car pair) (cdr pair)))
	dan-c-c++-mode-keybindings))

;; (add-hook 'c-mode-hook 'c++-mode) ;; I want C++ comments, but that seems a bit heavy-handed?
(add-hook 'c-mode-hook 'dan-c-c++-mode-hook)
(add-hook 'c++-mode-hook 'dan-c-c++-mode-hook)

;; python
(defun dan-python-mode-hook ()
  (local-set-key "\C-c\C-l" 'py-execute-buffer)
  (other-window 1)) ;; should really be change to buffer named *Python*

(add-hook 'python-mode-hook 'dan-python-mode-hook)

;; lua
(setq auto-mode-alist (cons '("\\.lua$" . lua-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.pyw$" . python-mode) auto-mode-alist))
(autoload 'lua-mode "/usr/local/src/lua-mode/lua-mode" "Lua editing mode." t)
;; (add-hook 'lua-mode-hook 'turn-on-font-lock)

;; this doesn't write anything in minibuffer...
(defun dan-show-current-font() 
  (interactive)
  (frame-parameter nil 'font))

;; Why doesn't this work? (Says something about wrong number of arguments)
(defun dan-indent-buffer ()
  "Indent whole buffer"
  (interactive)
  (mark-whole-buffer)
  (indent-region))

(defun dan-eval-buffer-confirm ()
  (interactive)
  (save-buffer)
  (eval-buffer)
  (message "loaded buffer %s" (buffer-name)))

;; http://blog.printf.net/ find-tag-at-point I often work on the
;; kernel or Xorg, and I would be totally ridiculously lost with both
;; if I wasn't using "tags" support in my editor. Here's how it works:
;; you run etags over your .[ch] files (or make tags in a kernel
;; source dir), and it generates a TAGS index. You load that in emacs
;; with M-x visit-tags-table, and with the below keybinding, pressing
;; F10 will take you to the original definition of whichever symbol
;; the cursor is on, no matter where it appears in the source
;; tree. Within a few presses of F10, you've escaped macro hell and
;; found where the code that actually defines the function you're
;; interested in is.


(defun find-tag-at-point ()
  "*Find tag whose name contains TAGNAME.
  Identical to `find-tag' but does not prompt for 
  tag when called interactively;  instead, uses 
  tag around or before point."
    (interactive)
    (find-tag (if current-prefix-arg
		  (find-tag-tag "Find tag: "))
	      (find-tag (find-tag-default))))

(defun search-forward-symbol-at-point ()
  "Search forward to next occurrence of thing at point"
  (interactive)
  (search-forward (symbol-name (symbol-at-point)) nil t)
  (backward-sexp)) ;; should be backward-symbol

(defun dan-insert-double-quotes ()
  (interactive)
  (insert "\"\"")
  (backward-char))

(defun quote-list-of-symbols ()
  "Place double quotes around the comma-separated,
parenthesis-delimited list of symbols at point"
  (interactive)
  (save-excursion
    (let ((beg (search-forward "("))
	  (end (save-excursion (search-forward ")"))))
      (insert "\"")
      (while (replace-regexp " *, *" "\", \"" t beg end))
      (replace-regexp " *)" "\")" t (point) (1+ end)))))

(defun dan-find-defun (fun)
  (interactive "a")
  (describe-function fun)
  (other-window 1)
  (when (re-search-forward "`[^']+\.e")
      (push-button)))

(defun dan-wc-region ()
  (interactive)
  (shell-command-on-region (mark) (point) "wc"))

;; http://www.emacswiki.org/cgi-bin/wiki/ToggleWindowSplit
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))



(define-key ctl-x-4-map "t" 'toggle-window-split)

;; From Sacha Chua website
(defun byte-compile-if-newer-and-load (file)
   "Byte compile file.el if newer than file.elc"
   (if (file-newer-than-file-p (concat file ".el")
			       (concat file ".elc"))
       (byte-compile-file (concat file ".el")))
   (load file))


(transient-mark-mode t) ;; something turns it off

(when (string-match "^23\.*" emacs-version)
  ;; temp hack to make w3m work with emacs23
  (require 'w3m-e21)
  (provide 'w3m-e23)
  (org-agenda-list)
  (delete-other-windows)


;; muttrc -> mailrc
;; alias \([a-z_-]+\) \([^<]+\)<\([^>]+\)>
;; alias \1 "\2 <\3>"
  (setq kill-buffer-query-functions
      '(lambda() t))
  ;; (gnus)
)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(safe-local-variable-values (quote ((org-export-html-extension . "php")
				      (noweb-default-code-mode . R-mode)
				      (outline-minor-mode)))))
(if nil
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(default ((t (:inherit nil :stipple nil :background "Grey15" :foreground "Grey" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 110 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))))
